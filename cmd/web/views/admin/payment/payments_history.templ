package payment

import (
	"fmt"
	"context"
	"io"
	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
	"github.com/hail2skins/armory/internal/models"
)

// PaymentsHistoryData is the data for the payments history page
type PaymentsHistoryData struct {
	*data.AdminData
	Payments []models.Payment
}

// Helper functions
templ formatAmount(amount int64, currency string) {
	if currency == "usd" {
		{ fmt.Sprintf("$%.2f", float64(amount) / 100.0) }
	} else {
		{ fmt.Sprintf("%.2f %s", float64(amount) / 100.0, currency) }
	}
}

templ formatSubscriptionTier(tier string) {
	if tier == "free" {
		{ "Free Tier" }
	} else if tier == "monthly" {
		{ "Liking It" }
	} else if tier == "yearly" {
		{ "Loving It" }
	} else if tier == "lifetime" {
		{ "Supporter" }
	} else if tier == "premium_lifetime" {
		{ "Big Baller" }
	} else {
		{ "Unknown Tier" }
	}
}

templ statusBadge(status string) {
	if status == "succeeded" {
		<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
			{ status }
		</span>
	} else if status == "pending" {
		<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
			{ status }
		</span>
	} else if status == "failed" {
		<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
			{ status }
		</span>
	} else if status == "refunded" {
		<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
			{ status }
		</span>
	} else if status == "canceled" {
		<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
			{ status }
		</span>
	} else {
		<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
			{ status }
		</span>
	}
}

// PaymentsHistory renders the admin payments history page
templ PaymentsHistory(data *PaymentsHistoryData) {
	@partials.Base(data.AuthData, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, `
				<div class="bg-white shadow-md rounded-lg p-6">
					<div class="flex justify-between items-center mb-6">
						<h1 class="text-2xl font-bold text-gunmetal-800">Payment History</h1>
						<a href="/admin/dashboard" class="text-brass-600 hover:text-brass-700 flex items-center">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
							</svg>
							Back to Dashboard
						</a>
					</div>
		`)
		if err != nil {
			return err
		}

		if data.Success != "" {
			_, err = io.WriteString(w, `
					<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
						<span class="block sm:inline">`+data.Success+`</span>
					</div>
			`)
			if err != nil {
				return err
			}
		}

		if data.Error != "" {
			_, err = io.WriteString(w, `
					<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
						<span class="block sm:inline">`+data.Error+`</span>
					</div>
			`)
			if err != nil {
				return err
			}
		}

		// Add search functionality
		_, err = io.WriteString(w, `
					<div class="mb-4">
						<input type="text" id="searchInput" placeholder="Search payments..." 
							class="w-full px-4 py-2 border rounded-lg text-gunmetal-800 focus:outline-none focus:ring-2 focus:ring-brass-500"
							onkeyup="searchTable()">
					</div>
		`)
		if err != nil {
			return err
		}

		if len(data.Payments) == 0 {
			_, err = io.WriteString(w, `
					<div class="text-center py-8">
						<p class="text-gray-500">There are no payments yet.</p>
					</div>
			`)
		} else {
			_, err = io.WriteString(w, `
					<div class="overflow-x-auto bg-white rounded-lg shadow overflow-y-auto">
						<table class="min-w-full bg-white border border-gunmetal-200 rounded-lg overflow-hidden" id="paymentsTable">
							<thead class="bg-gunmetal-200">
								<tr>
									<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(0)">
										Date <span class="ml-1">↕</span>
									</th>
									<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(1)">
										User ID <span class="ml-1">↕</span>
									</th>
									<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(2)">
										Description <span class="ml-1">↕</span>
									</th>
									<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(3)">
										Type <span class="ml-1">↕</span>
									</th>
									<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(4)">
										Amount <span class="ml-1">↕</span>
									</th>
									<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(5)">
										Status <span class="ml-1">↕</span>
									</th>
									<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gunmetal-800">
										Stripe ID
									</th>
								</tr>
							</thead>
							<tbody class="divide-y divide-gunmetal-200 text-gunmetal-800">
			`)
			if err != nil {
				return err
			}

			for _, payment := range data.Payments {
				_, err = io.WriteString(w, `
								<tr class="hover:bg-gunmetal-50">
									<td class="px-6 py-4 whitespace-nowrap">
										`+payment.CreatedAt.Format("Jan 2, 2006 15:04:05")+`
									</td>
									<td class="px-6 py-4 whitespace-nowrap">
										`+fmt.Sprintf("%d", payment.UserID)+`
									</td>
									<td class="px-6 py-4 whitespace-nowrap">
										`+payment.Description+`
									</td>
									<td class="px-6 py-4 whitespace-nowrap">
										`+payment.PaymentType+`
									</td>
									<td class="px-6 py-4 whitespace-nowrap">
				`)
				if err != nil {
					return err
				}

				if payment.Currency == "usd" {
					_, err = io.WriteString(w, fmt.Sprintf("$%.2f", float64(payment.Amount)/100.0))
				} else {
					_, err = io.WriteString(w, fmt.Sprintf("%.2f %s", float64(payment.Amount)/100.0, payment.Currency))
				}
				
				_, err = io.WriteString(w, `
									</td>
									<td class="px-6 py-4 whitespace-nowrap">
				`)
				if err != nil {
					return err
				}

				// Write status badge
				badgeClass := "bg-gray-100 text-gray-800"
				if payment.Status == "succeeded" {
					badgeClass = "bg-green-100 text-green-800"
				} else if payment.Status == "pending" {
					badgeClass = "bg-yellow-100 text-yellow-800"
				} else if payment.Status == "failed" {
					badgeClass = "bg-red-100 text-red-800"
				} else if payment.Status == "refunded" {
					badgeClass = "bg-blue-100 text-blue-800"
				}

				_, err = io.WriteString(w, `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full `+badgeClass+`">`+payment.Status+`</span>`)
				if err != nil {
					return err
				}

				_, err = io.WriteString(w, `
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
										`+payment.StripeID+`
									</td>
								</tr>
				`)
				if err != nil {
					return err
				}
			}

			_, err = io.WriteString(w, `
							</tbody>
						</table>
					</div>
			`)
			if err != nil {
				return err
			}
		}

		// Add JavaScript for sorting and searching
		_, err = io.WriteString(w, `
				</div>
				
				<script>
				function searchTable() {
					// Declare variables
					var input, filter, table, tr, td, i, j, txtValue, found;
					input = document.getElementById("searchInput");
					filter = input.value.toUpperCase();
					table = document.getElementById("paymentsTable");
					tr = table.getElementsByTagName("tr");

					// Loop through all table rows except the header
					for (i = 1; i < tr.length; i++) {
						found = false;
						// Loop through all columns in each row
						for (j = 0; j < 7; j++) { // Check all columns
							td = tr[i].getElementsByTagName("td")[j];
							if (td) {
								txtValue = td.textContent || td.innerText;
								if (txtValue.toUpperCase().indexOf(filter) > -1) {
									found = true;
									break;
								}
							}
						}
						// Show/hide row based on search match
						if (found) {
							tr[i].style.display = "";
						} else {
							tr[i].style.display = "none";
						}
					}
				}

				function sortTable(colIndex) {
					var table, rows, switching, i, x, y, shouldSwitch, dir = "asc", switchcount = 0;
					table = document.getElementById("paymentsTable");
					switching = true;
					
					// Set sort direction to ascending
					while (switching) {
						switching = false;
						rows = table.rows;
						
						// Loop through rows (except header)
						for (i = 1; i < (rows.length - 1); i++) {
							shouldSwitch = false;
							x = rows[i].getElementsByTagName("TD")[colIndex];
							y = rows[i + 1].getElementsByTagName("TD")[colIndex];
							
							// Check if the two rows should switch
							if (dir == "asc") {
								if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
									shouldSwitch = true;
									break;
								}
							} else if (dir == "desc") {
								if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
									shouldSwitch = true;
									break;
								}
							}
						}
						
						if (shouldSwitch) {
							// Make the switch and mark that a switch has been done
							rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
							switching = true;
							switchcount++;
						} else {
							// If no switching has been done AND the direction is "asc", set the direction to "desc" and run the loop again
							if (switchcount == 0 && dir == "asc") {
								dir = "desc";
								switching = true;
							}
						}
					}
				}
				</script>
		`)
		
		return err
	}))
} 