package feature_flags

import (
	"context"
	"html"
	"io"
	"strconv"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

templ Edit(viewData data.ViewData) {
	@partials.Base(viewData.AuthData, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		formData, ok := viewData.Data.(*data.FeatureFlagFormData)
		if !ok || formData.FeatureFlag == nil {
			_, err := io.WriteString(w, `
				<div class="container mx-auto px-4 py-8">
					<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
						<span class="block sm:inline">Feature flag not found or invalid data provided</span>
					</div>
					<div class="mt-4">
						<a href="/admin/permissions/feature-flags" class="text-brass-600 hover:text-brass-700">
							&larr; Back to Feature Flags
						</a>
					</div>
				</div>
			`)
			return err
		}
		
		flag := formData.FeatureFlag
		flagID := strconv.FormatUint(uint64(flag.ID), 10)
		
		_, err := io.WriteString(w, `
			<div class="container mx-auto px-4 py-8">
				<div class="mb-8">
					<h1 class="text-2xl font-bold text-gunmetal-800">Edit Feature Flag</h1>
					<p class="text-gray-600">Modify feature flag settings and role assignments.</p>
				</div>
		`)
		if err != nil {
			return err
		}

		if viewData.ErrorMsg != "" {
			_, err = io.WriteString(w, `
				<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
					<span class="block sm:inline">`+viewData.ErrorMsg+`</span>
				</div>
			`)
			if err != nil {
				return err
			}
		}
		
		// Get flash messages from the session if available
		if flash, exists := ctx.Value("flash").(string); exists && flash != "" {
			_, err = io.WriteString(w, `
				<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
					<span class="block sm:inline">`+flash+`</span>
				</div>
			`)
			if err != nil {
				return err
			}
		}

		// Feature Flag Edit Form
		_, err = io.WriteString(w, `
			<div class="bg-white rounded-lg shadow mb-8">
				<div class="px-6 py-4 border-b border-gray-200">
					<h2 class="text-xl font-semibold">Feature Flag Details</h2>
				</div>
				<div class="p-6">
					<form method="POST" action="/admin/permissions/feature-flags/edit/`+flagID+`">
						<input type="hidden" name="csrf_token" value="`+viewData.AuthData.CSRFToken+`">
						
						<div class="mb-4">
							<label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
							<input
								type="text"
								id="name"
								name="name"
								required
								value="`+html.EscapeString(flag.Name)+`"
								class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brass-500 focus:border-brass-500"
							>
							<p class="mt-1 text-sm text-gray-500">Use snake_case for feature names (e.g., new_feature)</p>
						</div>
						
						<div class="mb-4">
							<label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
							<textarea
								id="description"
								name="description"
								rows="3"
								class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brass-500 focus:border-brass-500"
							>`+html.EscapeString(flag.Description)+`</textarea>
						</div>
						
						<div class="mb-6">
							<div class="flex items-center">
								<input
									type="checkbox"
									id="enabled"
									name="enabled"
									value="true"
									class="h-4 w-4 text-brass-600 focus:ring-brass-500 border-gray-300 rounded"
									`+func() string {
										if flag.Enabled {
											return "checked"
										}
										return ""
									}()+`
								>
								<label for="enabled" class="ml-2 block text-sm text-gray-700">Enable this feature</label>
							</div>
							<p class="mt-1 text-sm text-gray-500">If enabled, the feature will be available to assigned roles</p>
						</div>
						
						<div class="flex justify-end">
							<a href="/admin/permissions/feature-flags" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-4 rounded mr-2">
								Cancel
							</a>
							<button type="submit" class="bg-brass-500 hover:bg-brass-600 text-white font-medium py-2 px-4 rounded">
								Update Feature Flag
							</button>
						</div>
					</form>
				</div>
			</div>

			<!-- Role Management Section -->
			<div class="bg-white rounded-lg shadow mb-8">
				<div class="px-6 py-4 border-b border-gray-200">
					<h2 class="text-xl font-semibold">Role Management</h2>
					<p class="text-sm text-gray-600">Manage which roles have access to this feature when enabled</p>
				</div>
				<div class="p-6">
					<!-- Current Roles -->
					<div class="mb-6">
						<h3 class="text-lg font-medium text-gray-900 mb-2">Current Roles</h3>
						<div class="flex flex-wrap gap-2">
							`+func() string {
								if len(formData.AssignedRoles) == 0 {
									return `<p class="text-gray-500">No roles assigned (available to all users when enabled)</p>`
								}
								
								result := ""
								for _, role := range formData.AssignedRoles {
									result += `
										<div class="flex items-center bg-gunmetal-200 rounded-md px-3 py-1">
											<span class="text-sm font-medium text-gunmetal-800 mr-2">` + html.EscapeString(role) + `</span>
											<form method="POST" action="/admin/permissions/feature-flags/` + flagID + `/roles/remove" class="inline">
												<input type="hidden" name="csrf_token" value="` + viewData.AuthData.CSRFToken + `">
												<input type="hidden" name="role" value="` + html.EscapeString(role) + `">
												<button type="submit" class="text-red-600 hover:text-red-800">
													<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
													</svg>
												</button>
											</form>
										</div>
									`
								}
								return result
							}()+`
						</div>
					</div>

					<!-- Add Role Form -->
					<div>
						<h3 class="text-lg font-medium text-gray-900 mb-2">Add Role</h3>
						`+func() string {
							availableRoles := formData.AvailableRoles
							var unassignedRoles []string
							
							// Filter out roles that are already assigned
							for _, role := range availableRoles {
								isAssigned := false
								for _, assignedRole := range formData.AssignedRoles {
									if role == assignedRole {
										isAssigned = true
										break
									}
								}
								if !isAssigned {
									unassignedRoles = append(unassignedRoles, role)
								}
							}
							
							if len(unassignedRoles) == 0 {
								return `<p class="text-gray-500">All available roles have been assigned</p>`
							}
							
							result := `
								<form method="POST" action="/admin/permissions/feature-flags/` + flagID + `/roles" class="flex items-end gap-2">
									<input type="hidden" name="csrf_token" value="` + viewData.AuthData.CSRFToken + `">
									<div class="min-w-[200px]">
										<label for="role" class="block text-sm font-medium text-gray-700 mb-1">Select Role</label>
										<select
											id="role"
											name="role"
											required
											class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brass-500 focus:border-brass-500"
										>
											<option value="">Select a role...</option>
							`
							
							for _, role := range unassignedRoles {
								result += `<option value="` + html.EscapeString(role) + `">` + html.EscapeString(role) + `</option>`
							}
							
							result += `
										</select>
									</div>
									<button type="submit" class="bg-brass-500 hover:bg-brass-600 text-white font-medium py-2 px-4 rounded">
										Add Role
									</button>
								</form>
							`
							return result
						}()+`
					</div>
				</div>
			</div>

			<div class="mt-4">
				<a href="/admin/permissions/feature-flags" class="text-brass-600 hover:text-brass-700">
					&larr; Back to Feature Flags
				</a>
			</div>
		</div>
		`)
		return err
	}))
} 