package munitions

import (
	"context"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

// Helper function to render error messages for a form field
func renderEditErrorForField(errors map[string]string, fieldName string) string {
	if errorMsg, exists := errors[fieldName]; exists && errorMsg != "" {
		return `<p class="text-red-500 text-xs italic mt-1">` + errorMsg + `</p>`
	}
	return ""
}

// Helper function to format date for the date input
func formatDateForInput(t *time.Time) string {
	if t == nil {
		return ""
	}
	return t.Format("2006-01-02")
}

templ Edit(data *data.OwnerData) {
	@partials.Base(data.Auth, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		// We expect at least one ammo item in the slice
		if len(data.Ammo) == 0 {
			_, err := io.WriteString(w, `
			<div class="container mx-auto px-4 py-8">
				<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
					<span class="block sm:inline">Ammunition not found.</span>
				</div>
				<a href="/owner/munitions" class="bg-gunmetal-600 hover:bg-gunmetal-700 text-white font-bold py-2 px-4 rounded">
					Back to Ammunition
				</a>
			</div>
			`)
			return err
		}

		// Get the first ammo item (we're only showing one)
		ammo := data.Ammo[0]
		ammoID := strconv.FormatUint(uint64(ammo.ID), 10)

		_, err := io.WriteString(w, `
		<link href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" rel="stylesheet" />
		<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

		<!-- Custom styles for our selects -->
		<style>
			/* Style for Choices.js dropdowns */
			.choices {
				margin-bottom: 16px;
				width: 100%;
			}
			
			.choices__inner {
				border: 1px solid #E2E8F0 !important;
				border-radius: 0.375rem !important;
				box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1) !important;
				padding: 8px 16px !important;
				min-height: 42px !important;
				background-color: white;
			}
			
			.choices__list--dropdown {
				border: 1px solid #E2E8F0 !important;
				box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1) !important;
				border-radius: 0.375rem !important;
			}
			
			.choices__list--dropdown .choices__item--selectable {
				padding: 8px 16px !important;
			}
			
			.choices__list--dropdown .choices__item--selectable.is-highlighted {
				background-color: #4B5563 !important;
				color: white !important;
			}
			
			.choices__input {
				background-color: transparent !important;
			}
			
			.choices[data-type*="select-one"] .choices__inner {
				padding-bottom: 8px !important;
			}
			
			.choices[data-type*="select-one"]:after {
				right: 16px !important;
			}
		</style>

		<div class="container mx-auto px-4 py-8">
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-3xl font-bold text-gunmetal-800">Edit Ammunition</h1>
				<div class="flex space-x-4">
					<a href="/owner/munitions" class="bg-gunmetal-500 hover:bg-gunmetal-600 text-white font-bold py-2 px-4 rounded">Back to Ammunition</a>
					<a href="/owner/munitions/` + ammoID + `" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">View Details</a>
				</div>
			</div>
		`)
		if err != nil {
			return err
		}

		if data.Auth.Error != "" {
			_, err = io.WriteString(w, `
			<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
				<span class="block sm:inline">`+data.Auth.Error+`</span>
			</div>
			`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
			<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
				<form action="/owner/munitions/` + ammoID + `" method="POST" class="space-y-6">
					<input type="hidden" name="csrf_token" value="` + data.Auth.CSRFToken + `" />
					
					<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
						<!-- Left Column - Required Fields -->
						<div>
							<h3 class="text-lg font-medium text-gunmetal-800 mb-4">Required Information</h3>
							
							<!-- Name -->
							<div class="mb-4">
								<label for="name" class="block text-gunmetal-700 text-sm font-bold mb-2">Purchase Note *</label>
								<input type="text" id="name" name="name" class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-700 leading-tight focus:outline-none focus:shadow-outline" maxlength="100" value="` + ammo.Name + `" required />
								<p class="text-xs text-gray-500 mt-1">Maximum 100 characters</p>
								`)
		if err != nil {
			return err
		}

		if nameError, ok := data.FormErrors["name"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+nameError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>
							
							<!-- Count -->
							<div class="mb-4">
								<label for="count" class="block text-gunmetal-700 text-sm font-bold mb-2">Quantity (Rounds) *</label>
								<input type="number" id="count" name="count" class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-700 leading-tight focus:outline-none focus:shadow-outline" min="1" value="` + strconv.Itoa(ammo.Count) + `" required />
								`)
		if err != nil {
			return err
		}

		if countError, ok := data.FormErrors["count"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+countError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>
							
							<!-- Brand -->
							<div class="mb-4">
								<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="brand_id">
									Brand *
								</label>
								<select class="filterable-select" id="brand_id" name="brand_id" required>
									<option value="">Select a brand</option>
								`)
		if err != nil {
			return err
		}

		for _, brand := range data.Brands {
			displayText := brand.Name
			selected := ""
			if brand.ID == ammo.BrandID {
				selected = " selected"
			}
			_, err = io.WriteString(w, `<option value="`+strconv.FormatUint(uint64(brand.ID), 10)+`"`+selected+`>`+displayText+`</option>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
								</select>
								`)
		if err != nil {
			return err
		}

		if brandError, ok := data.FormErrors["brand_id"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+brandError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>
							
							<!-- Caliber -->
							<div class="mb-4">
								<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="caliber_id">
									Caliber *
								</label>
								<select class="filterable-select" id="caliber_id" name="caliber_id" required>
									<option value="">Select a caliber</option>
								`)
		if err != nil {
			return err
		}

		for _, caliber := range data.Calibers {
			displayText := caliber.Caliber
			if caliber.Nickname != "" {
				displayText = caliber.Caliber + " (" + caliber.Nickname + ")"
			}
			selected := ""
			if caliber.ID == ammo.CaliberID {
				selected = " selected"
			}
			_, err = io.WriteString(w, `<option value="`+strconv.FormatUint(uint64(caliber.ID), 10)+`"`+selected+`>`+displayText+`</option>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
								</select>
								`)
		if err != nil {
			return err
		}

		if caliberError, ok := data.FormErrors["caliber_id"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+caliberError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>
						</div>

						<!-- Right Column - Optional Fields -->
						<div>
							<h3 class="text-lg font-medium text-gunmetal-800 mb-4">Optional Details</h3>
							
							<!-- Price -->
							<div class="mb-4">
								<label for="paid" class="block text-gunmetal-700 text-sm font-bold mb-2">Price Paid (USD)</label>
								<div class="relative">
									<span class="absolute left-3 top-2 text-gunmetal-700">$</span>
									<input type="number" id="paid" name="paid" step="0.01" min="0" value="` + func() string {
										if ammo.Paid != nil {
											return fmt.Sprintf("%.2f", *ammo.Paid)
										}
										return ""
									}() + `" class="shadow appearance-none border rounded w-full py-2 pl-6 pr-3 text-gunmetal-700 leading-tight focus:outline-none focus:shadow-outline" />
								</div>
								`)
		if err != nil {
			return err
		}

		if paidError, ok := data.FormErrors["paid"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+paidError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>

							<!-- Date -->
							<div class="mb-4">
								<label for="acquired_date" class="block text-gunmetal-700 text-sm font-bold mb-2">Acquisition Date</label>
								<input type="date" id="acquired_date" name="acquired_date" value="` + func() string {
									if ammo.Acquired != nil {
										return ammo.Acquired.Format("2006-01-02")
									}
									return ""
								}() + `" class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-700 leading-tight focus:outline-none focus:shadow-outline" max="` + time.Now().Format("2006-01-02") + `" />
								`)
		if err != nil {
			return err
		}

		if dateError, ok := data.FormErrors["acquired_date"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+dateError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>
							
							<!-- Expended (Rounds Fired) -->
							<div class="mb-4">
								<label for="expended" class="block text-gunmetal-700 text-sm font-bold mb-2">Rounds Fired</label>
								<input type="number" id="expended" name="expended" class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-700 leading-tight focus:outline-none focus:shadow-outline" min="0" value="` + strconv.Itoa(ammo.Expended) + `" />
								<p class="text-xs text-gray-500 mt-1">Range day automatically increments this field, but you can manually enter to accurately reflect your total round count.</p>
								`)
		if err != nil {
			return err
		}

		if expendedError, ok := data.FormErrors["expended"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+expendedError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>
							
							<!-- Bullet Style -->
							<div class="mb-4">
								<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="bullet_style_id">
									Bullet Style
								</label>
								<select class="filterable-select" id="bullet_style_id" name="bullet_style_id">
									<option value="">Select a bullet style</option>
								`)
		if err != nil {
			return err
		}

		for _, style := range data.BulletStyles {
			displayText := style.Type
			selected := ""
			if style.ID == ammo.BulletStyleID {
				selected = " selected"
			}
			_, err = io.WriteString(w, `<option value="`+strconv.FormatUint(uint64(style.ID), 10)+`"`+selected+`>`+displayText+`</option>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
								</select>
								`)
		if err != nil {
			return err
		}

		if styleError, ok := data.FormErrors["bullet_style_id"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+styleError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>
							
							<!-- Grain -->
							<div class="mb-4">
								<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="grain_id">
									Grain Weight
								</label>
								<select class="filterable-select" id="grain_id" name="grain_id">
									<option value="">Select a grain weight</option>
								`)
		if err != nil {
			return err
		}

		for _, grain := range data.Grains {
			displayText := ""
			if grain.Weight == 0 {
				displayText = "Other"
			} else {
				displayText = fmt.Sprintf("%d gr", grain.Weight)
			}
			selected := ""
			if grain.ID == ammo.GrainID {
				selected = " selected"
			}
			_, err = io.WriteString(w, `<option value="`+strconv.FormatUint(uint64(grain.ID), 10)+`"`+selected+`>`+displayText+`</option>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
								</select>
								`)
		if err != nil {
			return err
		}

		if grainError, ok := data.FormErrors["grain_id"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+grainError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>
							
							<!-- Casing -->
							<div class="mb-4">
								<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="casing_id">
									Casing
								</label>
								<select class="filterable-select" id="casing_id" name="casing_id">
									<option value="">Select a casing type</option>
								`)
		if err != nil {
			return err
		}

		for _, casing := range data.Casings {
			displayText := casing.Type
			selected := ""
			if casing.ID == ammo.CasingID {
				selected = " selected"
			}
			_, err = io.WriteString(w, `<option value="`+strconv.FormatUint(uint64(casing.ID), 10)+`"`+selected+`>`+displayText+`</option>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
								</select>
								`)
		if err != nil {
			return err
		}

		if casingError, ok := data.FormErrors["casing_id"]; ok {
			_, err = io.WriteString(w, `<p class="text-red-500 text-xs italic mt-1">`+casingError+`</p>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</div>
						</div>
					</div>
					
					<!-- Submit Button -->
					<div class="flex items-center justify-between pt-6">
						<button type="submit" class="bg-gunmetal-600 hover:bg-gunmetal-700 text-white font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline">
							Update Ammunition
						</button>
						<a href="/owner/munitions/` + ammoID + `" class="text-gunmetal-600 hover:text-gunmetal-800 font-medium">Cancel</a>
					</div>
				</form>
			</div>
			
			<script>
				document.addEventListener('DOMContentLoaded', function() {
					// Initialize Choices.js on all selects with filterable-select class
					var filterableSelects = document.querySelectorAll('.filterable-select');
					
					filterableSelects.forEach(function(select) {
						new Choices(select, {
							searchEnabled: true,
							searchPlaceholderValue: 'Type to search...',
							itemSelectText: '',
							shouldSort: false,
							searchResultLimit: 50,
							position: 'auto',
							placeholder: true,
							placeholderValue: 'Select an option',
							// Disable fuzzy search completely - only exact substring matching
							fuseOptions: {
								// 0 = exact match only
								threshold: 0,
								// Only search in these properties
								keys: ['label', 'value', 'customProperties.displayText']
							}
						});
					});
					
					// Add date validation for acquired date
					const dateField = document.getElementById('acquired_date');
					
					dateField.addEventListener('input', function() {
						const selectedDate = new Date(this.value);
						const today = new Date();
						today.setHours(0, 0, 0, 0); // Reset time part for date comparison
						
						if (selectedDate > today) {
							// Show client-side warning but allow submission
							if (!this.nextElementSibling || !this.nextElementSibling.classList.contains('date-warning')) {
								const warning = document.createElement('p');
								warning.textContent = 'Warning: Date is in the future';
								warning.className = 'text-yellow-500 text-xs italic date-warning';
								this.parentNode.insertBefore(warning, this.nextElementSibling);
							}
						} else {
							// Remove warning if date is valid
							const warning = this.nextElementSibling;
							if (warning && warning.classList.contains('date-warning')) {
								warning.remove();
							}
						}
					});
				});
			</script>
		</div>
		`)
		
		return err
	}))
} 