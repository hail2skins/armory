package admin

import (
	"fmt"
	"io"
	"context"
	"strconv"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

// Helper function to return the appropriate sort order for a column
func getUserSortOrder(currentSortBy string, columnName string, currentSortOrder string) string {
	if currentSortBy == columnName {
		if currentSortOrder == "asc" {
			return "desc"
		}
		return "asc"
	}
	return "asc"
}

// Helper function for sort icons
templ userSortIcon(sortBy string, column string, sortOrder string) {
	if sortBy == column {
		if sortOrder == "asc" {
			<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M5.293 7.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L6.707 7.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
			</svg>
		} else {
			<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M14.707 12.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 14.586V3a1 1 0 012 0v11.586l2.293-2.293a1 1 0 011.414 0z" clip-rule="evenodd" />
			</svg>
		}
	} else {
		<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
			<path d="M5 12a1 1 0 102 0V6.414l1.293 1.293a1 1 0 001.414-1.414l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L5 6.414V12zM15 8a1 1 0 10-2 0v5.586l-1.293-1.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L15 13.586V8z" />
		</svg>
	}
}

// Helper function to get sort icon class
func getUserSortIconClass(sortBy string, column string, sortOrder string) string {
	if sortBy == column {
		if sortOrder == "asc" {
			return "text-brass-600"
		}
		return "text-brass-600 transform rotate-180"
	}
	return "text-gray-500"
}

// Helper function for min value
func userMin(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// Helper function to render sort icons as HTML
func renderUserSortIcon(sortBy string, column string, sortOrder string) string {
	if sortBy == column {
		if sortOrder == "asc" {
			return `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 text-brass-600" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M5.293 7.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L6.707 7.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
			</svg>`
		} else {
			return `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 text-brass-600" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M14.707 12.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 14.586V3a1 1 0 012 0v11.586l2.293-2.293a1 1 0 011.414 0z" clip-rule="evenodd" />
			</svg>`
		}
	} else {
		return `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
			<path d="M5 12a1 1 0 102 0V6.414l1.293 1.293a1 1 0 001.414-1.414l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L5 6.414V12zM15 8a1 1 0 10-2 0v5.586l-1.293-1.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L15 13.586V8z" />
		</svg>`
	}
}

// UserList renders the user management page with a list of all users
templ UserList(data *data.UserListData) {
	@partials.Base(data.AuthData, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, `
				<div class="bg-white shadow-md rounded-lg p-6">
					<div class="flex justify-between items-center mb-6">
						<h1 class="text-2xl font-bold text-gunmetal-800">User Management</h1>
						<a href="/admin/dashboard" class="text-brass-600 hover:text-brass-700 flex items-center">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
							</svg>
							Back to Dashboard
						</a>
					</div>
		`)
		if err != nil {
			return err
		}

		if data.Success != "" {
			_, err = io.WriteString(w, `
					<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
						<span class="block sm:inline">`+data.Success+`</span>
					</div>
			`)
			if err != nil {
				return err
			}
		}

		if data.Error != "" {
			_, err = io.WriteString(w, `
					<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
						<span class="block sm:inline">`+data.Error+`</span>
					</div>
			`)
			if err != nil {
				return err
			}
		}

		// Search and filters section
		_, err = io.WriteString(w, `
					<div class="mb-6">
						<form action="/admin/users" method="GET" class="flex flex-col md:flex-row gap-4">
							<div class="flex-grow">
								<div class="relative">
									<input 
										type="text" 
										name="q" 
										value="`+data.SearchQuery+`" 
										placeholder="Search by email..." 
										class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brass-500 focus:border-transparent"
									>
									<button type="submit" class="absolute right-0 top-0 h-full px-4 text-gray-600 hover:text-brass-500">
										<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
											<path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
										</svg>
									</button>
								</div>
							</div>
							
							<input type="hidden" name="sortBy" value="`+data.SortBy+`">
							<input type="hidden" name="sortOrder" value="`+data.SortOrder+`">
							<input type="hidden" name="page" value="1">
							<input type="hidden" name="perPage" value="`+strconv.Itoa(data.PerPage)+`">
							
							<div class="flex items-center gap-2">
								<span class="text-gray-700">Show:</span>
								<select 
									name="perPage" 
									onchange="this.form.submit()" 
									class="border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-brass-500 focus:border-transparent"
								>
		`)
		if err != nil {
			return err
		}

		// Render perPage options
		perPageOptions := []int{10, 25, 50, 100}
		for _, option := range perPageOptions {
			selected := ""
			if data.PerPage == option {
				selected = "selected"
			}
			_, err = io.WriteString(w, `<option value="`+strconv.Itoa(option)+`" `+selected+`>`+strconv.Itoa(option)+`</option>`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
								</select>
							</div>
						</form>
					</div>
					
					<div class="overflow-x-auto">
						<table class="min-w-full bg-white border border-gunmetal-200 rounded-lg overflow-hidden">
							<thead class="bg-gunmetal-200">
								<tr>
									<th class="py-3 px-4 text-left text-gunmetal-800">
										<a href="/admin/users?sortBy=email&sortOrder=`+getUserSortOrder(data.SortBy, "email", data.SortOrder)+`&page=`+strconv.Itoa(data.CurrentPage)+`&perPage=`+strconv.Itoa(data.PerPage)+`&q=`+data.SearchQuery+`" class="flex items-center">
											Email
											`+renderUserSortIcon(data.SortBy, "email", data.SortOrder)+`
										</a>
									</th>
									<th class="py-3 px-4 text-left text-gunmetal-800">
										<a href="/admin/users?sortBy=created_at&sortOrder=`+getUserSortOrder(data.SortBy, "created_at", data.SortOrder)+`&page=`+strconv.Itoa(data.CurrentPage)+`&perPage=`+strconv.Itoa(data.PerPage)+`&q=`+data.SearchQuery+`" class="flex items-center">
											Registered
											`+renderUserSortIcon(data.SortBy, "created_at", data.SortOrder)+`
										</a>
									</th>
									<th class="py-3 px-4 text-left text-gunmetal-800">
										<a href="/admin/users?sortBy=last_login&sortOrder=`+getUserSortOrder(data.SortBy, "last_login", data.SortOrder)+`&page=`+strconv.Itoa(data.CurrentPage)+`&perPage=`+strconv.Itoa(data.PerPage)+`&q=`+data.SearchQuery+`" class="flex items-center">
											Last Login
											`+renderUserSortIcon(data.SortBy, "last_login", data.SortOrder)+`
										</a>
									</th>
									<th class="py-3 px-4 text-left text-gunmetal-800">
										<a href="/admin/users?sortBy=subscription_tier&sortOrder=`+getUserSortOrder(data.SortBy, "subscription_tier", data.SortOrder)+`&page=`+strconv.Itoa(data.CurrentPage)+`&perPage=`+strconv.Itoa(data.PerPage)+`&q=`+data.SearchQuery+`" class="flex items-center">
											Subscribed
											`+renderUserSortIcon(data.SortBy, "subscription_tier", data.SortOrder)+`
										</a>
									</th>
									<th class="py-3 px-4 text-left text-gunmetal-800">
										<a href="/admin/users?sortBy=verified&sortOrder=`+getUserSortOrder(data.SortBy, "verified", data.SortOrder)+`&page=`+strconv.Itoa(data.CurrentPage)+`&perPage=`+strconv.Itoa(data.PerPage)+`&q=`+data.SearchQuery+`" class="flex items-center">
											Verified
											`+renderUserSortIcon(data.SortBy, "verified", data.SortOrder)+`
										</a>
									</th>
									<th class="py-3 px-4 text-left text-gunmetal-800">
										<a href="/admin/users?sortBy=deleted_at&sortOrder=`+getUserSortOrder(data.SortBy, "deleted_at", data.SortOrder)+`&page=`+strconv.Itoa(data.CurrentPage)+`&perPage=`+strconv.Itoa(data.PerPage)+`&q=`+data.SearchQuery+`" class="flex items-center">
											Deleted
											`+renderUserSortIcon(data.SortBy, "deleted_at", data.SortOrder)+`
										</a>
									</th>
									<th class="py-3 px-4 text-left text-gunmetal-800">Actions</th>
								</tr>
							</thead>
							<tbody class="divide-y divide-gunmetal-200">
		`)
		if err != nil {
			return err
		}

		if len(data.Users) == 0 {
			_, err = io.WriteString(w, `
									<tr>
										<td colspan="7" class="py-4 px-4 text-center text-gunmetal-700">No users found</td>
									</tr>
			`)
			if err != nil {
				return err
			}
		} else {
			for _, user := range data.Users {
				_, err = io.WriteString(w, `
									<tr class="hover:bg-gunmetal-50">
										<td class="py-3 px-4 text-gunmetal-800">
											<a href="/admin/users/`+fmt.Sprint(user.GetID())+`" class="text-brass-600 hover:text-brass-700 hover:underline">`+user.GetUserName()+`</a>
										</td>
										<td class="py-3 px-4 text-gunmetal-800">`+user.GetCreatedAt().Format("Jan 2, 2006")+`</td>
										<td class="py-3 px-4 text-gunmetal-800">
					`)
				if err != nil {
					return err
				}

				if user.GetLastLogin().IsZero() {
					_, err = io.WriteString(w, `<span class="italic text-gunmetal-600">Never</span>`)
				} else {
					_, err = io.WriteString(w, `<span>`+user.GetLastLogin().Format("Jan 2, 2006")+`</span>`)
				}
				if err != nil {
					return err
				}

				_, err = io.WriteString(w, `
										</td>
										<td class="py-3 px-4">
					`)
				if err != nil {
					return err
				}

				// Subscription tier badge
				switch user.GetSubscriptionTier() {
				case "free":
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-gray-200 text-gray-800 rounded-full text-xs font-medium">Free</span>`)
				case "monthly":
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-blue-200 text-blue-800 rounded-full text-xs font-medium">Monthly</span>`)
				case "yearly":
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-green-200 text-green-800 rounded-full text-xs font-medium">Yearly</span>`)
				case "lifetime":
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-purple-200 text-purple-800 rounded-full text-xs font-medium">Lifetime</span>`)
				case "premium_lifetime":
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-yellow-200 text-yellow-800 rounded-full text-xs font-medium">Premium</span>`)
				case "promotion":
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-pink-200 text-pink-800 rounded-full text-xs font-medium">Promotion</span>`)
				case "admin_grant":
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-cyan-200 text-cyan-800 rounded-full text-xs font-medium">Admin Grant</span>`)
				}
				if err != nil {
					return err
				}

				_, err = io.WriteString(w, `
										</td>
										<td class="py-3 px-4">
					`)
				if err != nil {
					return err
				}

				// Verified status badge
				if user.IsVerified() {
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-green-200 text-green-800 rounded-full text-xs font-medium">Yes</span>`)
				} else {
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-red-200 text-red-800 rounded-full text-xs font-medium">No</span>`)
				}
				if err != nil {
					return err
				}

				_, err = io.WriteString(w, `
										</td>
										<td class="py-3 px-4">
					`)
				if err != nil {
					return err
				}

				// Deleted status badge
				if user.IsDeleted() {
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-red-200 text-red-800 rounded-full text-xs font-medium">Yes</span>`)
				} else {
					_, err = io.WriteString(w, `<span class="px-2 py-1 bg-green-200 text-green-800 rounded-full text-xs font-medium">No</span>`)
				}
				if err != nil {
					return err
				}

				_, err = io.WriteString(w, `
										</td>
										<td class="py-3 px-4 flex space-x-2">
											<a href="/admin/users/`+fmt.Sprint(user.GetID())+`" class="px-3 py-1 bg-brass-500 hover:bg-brass-600 text-white rounded-md text-sm inline-block">View</a>
											<a href="/admin/users/`+fmt.Sprint(user.GetID())+`/edit" class="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded-md text-sm inline-block">Edit</a>
					`)
				if err != nil {
					return err
				}

				if !user.IsDeleted() {
					_, err = io.WriteString(w, `<form method="POST" action="/admin/users/`+fmt.Sprint(user.GetID())+`/delete" onsubmit="return confirm('Are you sure you want to delete this user?');" class="inline">
												<button type="submit" class="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md text-sm">Delete</button>
											</form>`)
				} else {
					_, err = io.WriteString(w, `<form method="POST" action="/admin/users/`+fmt.Sprint(user.GetID())+`/restore" class="inline">
												<button type="submit" class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded-md text-sm">Restore</button>
											</form>`)
				}
				if err != nil {
					return err
				}

				_, err = io.WriteString(w, `
										</td>
									</tr>
					`)
				if err != nil {
					return err
				}
			}
		}

		_, err = io.WriteString(w, `
							</tbody>
						</table>
					</div>
		`)
		if err != nil {
			return err
		}

		// Pagination
		if data.TotalPages > 1 {
			_, err = io.WriteString(w, `
					<div class="mt-4 flex justify-between items-center">
						<div class="flex space-x-1">
			`)
			if err != nil {
				return err
			}

			// Previous button
			if data.CurrentPage > 1 {
				_, err = io.WriteString(w, `<a href="/admin/users?page=`+strconv.Itoa(data.CurrentPage-1)+`&perPage=`+strconv.Itoa(data.PerPage)+`&sortBy=`+data.SortBy+`&sortOrder=`+data.SortOrder+`&q=`+data.SearchQuery+`" class="px-3 py-1 bg-gunmetal-200 text-gunmetal-800 rounded hover:bg-gunmetal-300">Previous</a>`)
			} else {
				_, err = io.WriteString(w, `<span class="px-3 py-1 bg-gunmetal-100 text-gunmetal-400 rounded cursor-not-allowed">Previous</span>`)
			}
			if err != nil {
				return err
			}

			// Page numbers
			startPage := data.CurrentPage - 2
			if startPage < 1 {
				startPage = 1
			}
			endPage := startPage + 4
			if endPage > data.TotalPages {
				endPage = data.TotalPages
				startPage = endPage - 4
				if startPage < 1 {
					startPage = 1
				}
			}

			for i := startPage; i <= endPage; i++ {
				if i == data.CurrentPage {
					_, err = io.WriteString(w, `<span class="px-3 py-1 bg-brass-500 text-white rounded">`+strconv.Itoa(i)+`</span>`)
				} else {
					_, err = io.WriteString(w, `<a href="/admin/users?page=`+strconv.Itoa(i)+`&perPage=`+strconv.Itoa(data.PerPage)+`&sortBy=`+data.SortBy+`&sortOrder=`+data.SortOrder+`&q=`+data.SearchQuery+`" class="px-3 py-1 bg-gunmetal-200 text-gunmetal-800 rounded hover:bg-gunmetal-300">`+strconv.Itoa(i)+`</a>`)
				}
				if err != nil {
					return err
				}
			}

			// Next button
			if data.CurrentPage < data.TotalPages {
				_, err = io.WriteString(w, `<a href="/admin/users?page=`+strconv.Itoa(data.CurrentPage+1)+`&perPage=`+strconv.Itoa(data.PerPage)+`&sortBy=`+data.SortBy+`&sortOrder=`+data.SortOrder+`&q=`+data.SearchQuery+`" class="px-3 py-1 bg-gunmetal-200 text-gunmetal-800 rounded hover:bg-gunmetal-300">Next</a>`)
			} else {
				_, err = io.WriteString(w, `<span class="px-3 py-1 bg-gunmetal-100 text-gunmetal-400 rounded cursor-not-allowed">Next</span>`)
			}
			if err != nil {
				return err
			}

			_, err = io.WriteString(w, `
							</div>
							<div class="text-sm text-gunmetal-600">
								Showing `+strconv.Itoa((data.CurrentPage-1)*data.PerPage+1)+` to `+strconv.Itoa(userMin((data.CurrentPage)*data.PerPage, int(data.TotalUsers)))+` of `+strconv.Itoa(int(data.TotalUsers))+` users
							</div>
						</div>
			`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
				</div>
		`)
		return err
	}))
} 