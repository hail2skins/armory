package promotion

import (
	"context"
	"io"
	"strconv"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

templ Index(data *data.AdminData) {
	@partials.Base(data.AuthData, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, `
				<div class="bg-white shadow-md rounded-lg p-6">
					<div class="flex justify-between items-center mb-6">
						<h1 class="text-2xl font-bold text-gunmetal-800">Promotions</h1>
						<a href="/admin/promotions/new" class="bg-brass-500 hover:bg-brass-600 text-white font-bold py-2 px-4 rounded">
							New Promotion
						</a>
					</div>
		`)
		if err != nil {
			return err
		}

		if data.Success != "" {
			_, err = io.WriteString(w, `
			<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
				<span class="block sm:inline">`+data.Success+`</span>
			</div>
			`)
			if err != nil {
				return err
			}
		}

		if data.Error != "" {
			_, err = io.WriteString(w, `
			<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
				<span class="block sm:inline">`+data.Error+`</span>
			</div>
			`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
		<div class="mb-4">
			<input type="text" id="searchInput" placeholder="Search promotions..." 
				class="w-full px-4 py-2 border rounded-lg text-gunmetal-800 focus:outline-none focus:ring-2 focus:ring-brass-500"
				onkeyup="searchTable()">
		</div>
		<div class="overflow-x-auto bg-white rounded-lg shadow overflow-y-auto">
			<table class="min-w-full bg-white border border-gunmetal-200 rounded-lg overflow-hidden" id="promotionsTable">
				<thead class="bg-gunmetal-200">
					<tr>
						<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(0)">
							Name <span class="ml-1">↕</span>
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(1)">
							Type <span class="ml-1">↕</span>
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(2)">
							Active <span class="ml-1">↕</span>
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(3)">
							Apply to Existing <span class="ml-1">↕</span>
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(4)">
							Start Date <span class="ml-1">↕</span>
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(5)">
							End Date <span class="ml-1">↕</span>
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gunmetal-800">
							Actions
						</th>
					</tr>
				</thead>
				<tbody class="divide-y divide-gunmetal-200 text-gunmetal-800">
		`)
		if err != nil {
			return err
		}

		if len(data.Promotions) == 0 {
			_, err = io.WriteString(w, `
			<tr>
				<td colspan="6" class="px-6 py-4 text-center text-gunmetal-800">No promotions found</td>
			</tr>
			`)
			if err != nil {
				return err
			}
		} else {
			for _, p := range data.Promotions {
				activeStatus := "No"
				if p.Active {
					activeStatus = "Yes"
				}
				
				_, err = io.WriteString(w, `
				<tr class="hover:bg-gunmetal-50">
					<td class="px-6 py-4 whitespace-nowrap">`+p.Name+`</td>
					<td class="px-6 py-4 whitespace-nowrap">`+p.Type+`</td>
					<td class="px-6 py-4 whitespace-nowrap">`+activeStatus+`</td>
					<td class="px-6 py-4 whitespace-nowrap">`+func() string {
						if p.ApplyToExistingUsers {
							return "Yes"
						}
						return "No"
					}()+`</td>
					<td class="px-6 py-4 whitespace-nowrap">`+p.StartDate.Format("01/02/2006")+`</td>
					<td class="px-6 py-4 whitespace-nowrap">`+p.EndDate.Format("01/02/2006")+`</td>
					<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
						<a href="/admin/promotions/`+strconv.Itoa(int(p.ID))+`" class="text-brass-600 hover:text-brass-700 mr-3">View</a>
						<a href="/admin/promotions/`+strconv.Itoa(int(p.ID))+`/edit" class="text-brass-600 hover:text-brass-700 mr-3">Edit</a>
						<form action="/admin/promotions/`+strconv.Itoa(int(p.ID))+`/delete" method="post" class="inline">
							<input type="hidden" name="csrf_token" value="` + data.AuthData.CSRFToken + `">
							<button type="submit" class="text-red-600 hover:text-red-700" onclick="return confirm('Are you sure?')">Delete</button>
						</form>
					</td>
				</tr>
				`)
				if err != nil {
					return err
				}
			}
		}

		_, err = io.WriteString(w, `
				</tbody>
			</table>
		</div>

		<script>
		function searchTable() {
			// Declare variables
			var input, filter, table, tr, td, i, j, txtValue, found;
			input = document.getElementById("searchInput");
			filter = input.value.toUpperCase();
			table = document.getElementById("promotionsTable");
			tr = table.getElementsByTagName("tr");

			// Loop through all table rows except the header
			for (i = 1; i < tr.length; i++) {
				found = false;
				// Loop through all columns in each row
				for (j = 0; j < 5; j++) { // Only search first 5 columns (excluding Actions)
					td = tr[i].getElementsByTagName("td")[j];
					if (td) {
						txtValue = td.textContent || td.innerText;
						if (txtValue.toUpperCase().indexOf(filter) > -1) {
							found = true;
							break;
						}
					}
				}
				// Show/hide row based on search match
				if (found) {
					tr[i].style.display = "";
				} else {
					tr[i].style.display = "none";
				}
			}
		}

		function sortTable(n) {
			var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
			table = document.getElementById("promotionsTable");
			switching = true;
			// Set the sorting direction to ascending
			dir = "asc";
			
			while (switching) {
				switching = false;
				rows = table.rows;
				
				for (i = 1; i < (rows.length - 1); i++) {
					shouldSwitch = false;
					x = rows[i].getElementsByTagName("TD")[n];
					y = rows[i + 1].getElementsByTagName("TD")[n];
					
					// Check if the two rows should switch place based on direction
					if (dir == "asc") {
						if (n === 3 || n === 4) { // Date columns - date sort
							var xDate = new Date(x.innerHTML.split('/').reverse().join('-'));
							var yDate = new Date(y.innerHTML.split('/').reverse().join('-'));
							if (xDate > yDate) {
								shouldSwitch = true;
								break;
							}
						} else { // Text sort
							if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
								shouldSwitch = true;
								break;
							}
						}
					} else if (dir == "desc") {
						if (n === 3 || n === 4) { // Date columns - date sort
							var xDate = new Date(x.innerHTML.split('/').reverse().join('-'));
							var yDate = new Date(y.innerHTML.split('/').reverse().join('-'));
							if (xDate < yDate) {
								shouldSwitch = true;
								break;
							}
						} else { // Text sort
							if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
								shouldSwitch = true;
								break;
							}
						}
					}
				}
				
				if (shouldSwitch) {
					rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
					switching = true;
					switchcount++;
				} else {
					// If no switching has been done AND the direction is "asc",
					// set the direction to "desc" and run the while loop again.
					if (switchcount == 0 && dir == "asc") {
						dir = "desc";
						switching = true;
					}
				}
			}
		}
		</script>
		</div>
		`)
		return err
	}))
} 