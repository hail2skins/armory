package gun

import (
	"context"
	"io"
	"strconv"
	"strings"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

templ Arsenal(data *data.OwnerData) {
	@partials.Base(data.Auth, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, `
		<div class="container mx-auto px-4 py-8">
			<div class="bg-white shadow-md rounded-lg p-6">
				<div class="flex justify-between items-center mb-6">
					<h1 class="text-2xl font-bold text-gunmetal-800">Your Arsenal</h1>
					<div class="flex space-x-2">
						<a href="/owner" class="bg-gunmetal-600 hover:bg-gunmetal-700 text-white font-bold py-2 px-4 rounded">
							Back to Dashboard
						</a>
						<a href="/owner/guns/new" class="bg-gunmetal-700 hover:bg-gunmetal-800 text-white font-bold py-2 px-4 rounded">
							Add New Firearm
						</a>
					</div>
				</div>
				
				<!-- Search and Filter -->
				<div class="mb-6">
					<div class="flex flex-col md:flex-row md:items-center space-y-2 md:space-y-0 md:space-x-4">
						<div class="flex-grow">
							<input type="text" id="search" placeholder="Search firearms..." class="w-full px-4 py-2 border border-gunmetal-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gunmetal-500">
						</div>
					</div>
				</div>
				
				<!-- Firearms Table -->
				`)
		if err != nil {
			return err
		}

		if len(data.Guns) > 0 {
			_, err = io.WriteString(w, `
				<div class="overflow-x-auto">
					<table class="min-w-full bg-white" id="arsenal-table">
						<thead class="bg-gunmetal-200">
							<tr>
								<th class="py-2 px-4 text-left text-gunmetal-800 cursor-pointer" data-sort="name">Name <span class="sort-icon">↕</span></th>
								<th class="py-2 px-4 text-left text-gunmetal-800 cursor-pointer" data-sort="type">Type <span class="sort-icon">↕</span></th>
								<th class="py-2 px-4 text-left text-gunmetal-800 cursor-pointer" data-sort="manufacturer">Manufacturer <span class="sort-icon">↕</span></th>
								<th class="py-2 px-4 text-left text-gunmetal-800 cursor-pointer" data-sort="caliber">Caliber <span class="sort-icon">↕</span></th>
								<th class="py-2 px-4 text-left text-gunmetal-800 cursor-pointer" data-sort="acquired">Acquired <span class="sort-icon">↕</span></th>
								<th class="py-2 px-4 text-left text-gunmetal-800">Actions</th>
							</tr>
						</thead>
						<tbody>
				`)
			if err != nil {
				return err
			}

			for _, gun := range data.Guns {
				_, err = io.WriteString(w, `
							<tr class="border-t hover:bg-gunmetal-50" data-name="`+strings.ToLower(gun.Name)+`" data-type="`+strings.ToLower(gun.WeaponType.Type)+`" data-manufacturer="`+strings.ToLower(gun.Manufacturer.Name)+`" data-caliber="`+strings.ToLower(gun.Caliber.Caliber)+`">
								<td class="py-2 px-4">
									<a href="/owner/guns/`+strconv.FormatUint(uint64(gun.ID), 10)+`" class="text-blue-600 hover:underline font-medium">
										`+gun.Name+`
									</a>
								</td>
								<td class="py-2 px-4 text-gunmetal-800">`+gun.WeaponType.Type+`</td>
								<td class="py-2 px-4 text-gunmetal-800">`+gun.Manufacturer.Name+`</td>
								<td class="py-2 px-4 text-gunmetal-800">`+gun.Caliber.Caliber+`</td>
								<td class="py-2 px-4 text-gunmetal-800">`)
				if err != nil {
					return err
				}

				if gun.Acquired != nil {
					_, err = io.WriteString(w, gun.Acquired.Format("Jan 2, 2006"))
				} else {
					_, err = io.WriteString(w, `<span class="text-gunmetal-500">Unknown</span>`)
				}
				if err != nil {
					return err
				}

				_, err = io.WriteString(w, `</td>
								<td class="py-2 px-4">
									<div class="flex space-x-2">
										<a href="/owner/guns/`+strconv.FormatUint(uint64(gun.ID), 10)+`" class="text-green-600 hover:text-green-800">
											Show
										</a>
										<a href="/owner/guns/`+strconv.FormatUint(uint64(gun.ID), 10)+`/edit" class="text-blue-600 hover:text-blue-800">
											Edit
										</a>
										<form method="POST" action="/owner/guns/`+strconv.FormatUint(uint64(gun.ID), 10)+`/delete" class="inline">
											<button type="submit" class="text-red-600 hover:text-red-800" onclick="return confirm('Are you sure you want to delete this firearm?')">
												Delete
											</button>
										</form>
									</div>
								</td>
							</tr>
				`)
				if err != nil {
					return err
				}
			}

			_, err = io.WriteString(w, `
						</tbody>
					</table>
				</div>
				`)
			
			// Add message for free tier users with more guns than shown
			if len(data.Guns) > 0 && data.Guns[0].HasMoreGuns {
				totalGuns := data.Guns[0].TotalGuns
				shownGuns := len(data.Guns)
				_, err = io.WriteString(w, `
					<div class="mt-4 p-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 text-center">
						<p>
							<span class="font-bold">Free Tier Limit:</span> Showing `+strconv.Itoa(shownGuns)+` of `+strconv.Itoa(totalGuns)+` firearms.
							<a href="/pricing" class="text-blue-600 hover:underline">Upgrade your subscription</a> to view all your firearms.
						</p>
					</div>
				`)
				if err != nil {
					return err
				}
			}
			
			_, err = io.WriteString(w, `
				<!-- Pagination (to be implemented) -->
				<div class="mt-4 flex justify-between items-center">
					<div>
						<span class="text-gunmetal-600">Showing `+strconv.Itoa(len(data.Guns))+` firearms</span>
					</div>
					<div class="flex space-x-2">
						<!-- Pagination controls will go here -->
					</div>
				</div>
				
				<script>
					// Search functionality
					document.getElementById('search').addEventListener('input', function(e) {
						const searchTerm = e.target.value.toLowerCase();
						const rows = document.querySelectorAll('#arsenal-table tbody tr');
						
						rows.forEach(row => {
							const name = row.getAttribute('data-name');
							const type = row.getAttribute('data-type');
							const manufacturer = row.getAttribute('data-manufacturer');
							const caliber = row.getAttribute('data-caliber');
							
							if (name.includes(searchTerm) || 
								type.includes(searchTerm) || 
								manufacturer.includes(searchTerm) || 
								caliber.includes(searchTerm)) {
								row.style.display = '';
							} else {
								row.style.display = 'none';
							}
						});
					});
					
					// Sorting functionality
					document.querySelectorAll('th[data-sort]').forEach(th => {
						th.addEventListener('click', function() {
							const sortBy = this.getAttribute('data-sort');
							const tbody = document.querySelector('#arsenal-table tbody');
							const rows = Array.from(tbody.querySelectorAll('tr'));
							
							// Toggle sort direction
							const currentDirection = this.getAttribute('data-direction') || 'asc';
							const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';
							
							// Update all headers to show they're not being sorted
							document.querySelectorAll('th[data-sort]').forEach(header => {
								header.setAttribute('data-direction', '');
								header.querySelector('.sort-icon').textContent = '↕';
							});
							
							// Update this header to show it's being sorted
							this.setAttribute('data-direction', newDirection);
							this.querySelector('.sort-icon').textContent = newDirection === 'asc' ? '↑' : '↓';
							
							// Sort the rows
							rows.sort((a, b) => {
								let aValue, bValue;
								
								if (sortBy === 'name') {
									aValue = a.getAttribute('data-name');
									bValue = b.getAttribute('data-name');
								} else if (sortBy === 'type') {
									aValue = a.getAttribute('data-type');
									bValue = b.getAttribute('data-type');
								} else if (sortBy === 'manufacturer') {
									aValue = a.getAttribute('data-manufacturer');
									bValue = b.getAttribute('data-manufacturer');
								} else if (sortBy === 'caliber') {
									aValue = a.getAttribute('data-caliber');
									bValue = b.getAttribute('data-caliber');
								} else if (sortBy === 'acquired') {
									// For dates, we'll use the text content of the cell
									aValue = a.querySelector('td:nth-child(5)').textContent.trim();
									bValue = b.querySelector('td:nth-child(5)').textContent.trim();
									
									// Handle "Unknown" values
									if (aValue === 'Unknown') aValue = '0';
									if (bValue === 'Unknown') bValue = '0';
								}
								
								if (newDirection === 'asc') {
									return aValue.localeCompare(bValue);
								} else {
									return bValue.localeCompare(aValue);
								}
							});
							
							// Re-append rows in the new order
							rows.forEach(row => tbody.appendChild(row));
						});
					});
				</script>
				`)
		} else {
			_, err = io.WriteString(w, `
				<div class="text-center py-8">
					<p class="text-gunmetal-700 mb-4">You haven't added any firearms yet.</p>
					<a href="/owner/guns/new" class="bg-gunmetal-700 hover:bg-gunmetal-800 text-white font-bold py-2 px-4 rounded">
						Add Your First Firearm
					</a>
				</div>
				`)
		}
		if err != nil {
			return err
		}

		_, err = io.WriteString(w, `
			</div>
		</div>
		`)
		return err
	}))
} 