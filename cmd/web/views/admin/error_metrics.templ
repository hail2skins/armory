package admin

import (
	"context"
	"fmt"
	"io"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

// ErrorMetrics renders the admin error metrics page
templ ErrorMetrics(data *data.AdminData) {
	@partials.Base(data.AuthData, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, `
				<div class="bg-white shadow-md rounded-lg p-6">
					<h1 class="text-2xl font-bold mb-6 text-gunmetal-800">Error Metrics</h1>
		`)
		if err != nil {
			return err
		}

		if data.Success != "" {
			_, err = io.WriteString(w, `
					<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
						<span class="block sm:inline">`+data.Success+`</span>
					</div>
			`)
			if err != nil {
				return err
			}
		}

		if data.Error != "" {
			_, err = io.WriteString(w, `
					<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
						<span class="block sm:inline">`+data.Error+`</span>
					</div>
			`)
			if err != nil {
				return err
			}
		}

		// Format count info
		criticalCount := fmt.Sprintf("%d", data.CriticalErrorCount)
		warningCount := fmt.Sprintf("%d", data.WarningCount)
		infoCount := fmt.Sprintf("%d", data.InfoCount)
		
		_, err = io.WriteString(w, `
					<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
						<div class="bg-red-50 p-4 rounded-lg shadow-md border border-red-100">
							<h3 class="text-lg font-semibold mb-2 text-red-800">Critical Errors</h3>
							<p class="text-3xl font-bold text-red-900">`+criticalCount+`</p>
							<p class="text-sm text-red-700 mt-2">Last 24 hours</p>
						</div>
						
						<div class="bg-yellow-50 p-4 rounded-lg shadow-md border border-yellow-100">
							<h3 class="text-lg font-semibold mb-2 text-yellow-800">Warnings</h3>
							<p class="text-3xl font-bold text-yellow-900">`+warningCount+`</p>
							<p class="text-sm text-yellow-700 mt-2">Last 24 hours</p>
						</div>
						
						<div class="bg-blue-50 p-4 rounded-lg shadow-md border border-blue-100">
							<h3 class="text-lg font-semibold mb-2 text-blue-800">Info Messages</h3>
							<p class="text-3xl font-bold text-blue-900">`+infoCount+`</p>
							<p class="text-sm text-blue-700 mt-2">Last 24 hours</p>
						</div>
					</div>
					
					<div class="mb-8">
						<h2 class="text-xl font-semibold mb-4 text-gunmetal-800">Recent Errors</h2>
						<div class="overflow-x-auto">
							<table class="min-w-full bg-white border border-gunmetal-200 rounded-lg overflow-hidden">
								<thead class="bg-gunmetal-200">
									<tr>
										<th class="py-3 px-4 text-left text-gunmetal-800">Timestamp</th>
										<th class="py-3 px-4 text-left text-gunmetal-800">Level</th>
										<th class="py-3 px-4 text-left text-gunmetal-800">Service</th>
										<th class="py-3 px-4 text-left text-gunmetal-800">Message</th>
										<th class="py-3 px-4 text-left text-gunmetal-800">Actions</th>
									</tr>
								</thead>
								<tbody class="divide-y divide-gunmetal-200">
		`)
		if err != nil {
			return err
		}
		
		// Display recent errors or a message if none
		if len(data.RecentErrors) == 0 {
			_, err = io.WriteString(w, `
									<tr class="hover:bg-gunmetal-50">
										<td colspan="5" class="py-3 px-4 text-center text-gunmetal-600">No errors recorded in the last 24 hours</td>
									</tr>
			`)
			if err != nil {
				return err
			}
		} else {
			// Display each error
			for i, errEntry := range data.RecentErrors {
				// Format the timestamp
				timestamp := errEntry.LastOccurred.Format("Jan 2, 15:04:05")
				
				// Determine level class
				levelClass := "bg-blue-100 text-blue-800"
				if errEntry.Level == "ERROR" {
					levelClass = "bg-red-100 text-red-800"
				} else if errEntry.Level == "WARNING" {
					levelClass = "bg-yellow-100 text-yellow-800"
				}
				
				// Create a unique ID for this error
				errorID := fmt.Sprintf("error-%d", i)
				
				_, err = io.WriteString(w, `
									<tr class="hover:bg-gunmetal-50">
										<td class="py-3 px-4 text-gunmetal-800">`+timestamp+`</td>
										<td class="py-3 px-4">
											<span class="px-2 py-1 `+levelClass+` rounded-full text-xs font-medium">`+errEntry.Level+`</span>
										</td>
										<td class="py-3 px-4 text-gunmetal-800">`+errEntry.Service+`</td>
										<td class="py-3 px-4 text-gunmetal-800">`+errEntry.Message+`</td>
										<td class="py-3 px-4">
											<button onclick="document.getElementById('`+errorID+`').classList.remove('hidden')" class="text-brass-600 hover:text-brass-700 font-medium">Details</button>
										</td>
									</tr>
				`)
				if err != nil {
					return err
				}
			}
		}
		
		_, err = io.WriteString(w, `
								</tbody>
							</table>
						</div>
					</div>
					
					<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
						<div>
							<h2 class="text-xl font-semibold mb-4 text-gunmetal-800">Error Rate Trends</h2>
							<div class="bg-gunmetal-100 p-4 rounded-lg h-64 flex items-center justify-center border border-gunmetal-200 shadow-md">
		`)
		if err != nil {
			return err
		}
		
		// Show total error rate
		if data.TotalErrorRate > 0 {
			_, err = io.WriteString(w, `
								<div class="text-center">
									<p class="text-2xl font-bold text-gunmetal-800">`+fmt.Sprintf("%.0f", data.TotalErrorRate)+`</p>
									<p class="text-gunmetal-600">Total errors in last 24 hours</p>
								</div>
			`)
		} else {
			_, err = io.WriteString(w, `
								<p class="text-gunmetal-700">No errors recorded in the last 24 hours</p>
			`)
		}
		if err != nil {
			return err
		}
		
		_, err = io.WriteString(w, `
							</div>
						</div>
						
						<div>
							<h2 class="text-xl font-semibold mb-4 text-gunmetal-800">Top Error Sources</h2>
							<div class="bg-gunmetal-100 p-4 rounded-lg border border-gunmetal-200 shadow-md">
		`)
		if err != nil {
			return err
		}
		
		// Display error sources or a message if none
		if len(data.ErrorRatesByService) == 0 {
			_, err = io.WriteString(w, `
								<p class="text-center text-gunmetal-600 p-4">No error sources to display</p>
			`)
			if err != nil {
				return err
			}
		} else {
			// Display each service's error percentage
			for service, percentage := range data.ErrorRatesByService {
				// Format the percentage
				percentStr := fmt.Sprintf("%.1f%%", percentage)
				percentWidth := fmt.Sprintf("%.1f%%", percentage)
				
				_, err = io.WriteString(w, `
								<div class="mb-3">
									<div class="flex justify-between mb-1">
										<span class="text-gunmetal-800">`+service+`</span>
										<span class="text-gunmetal-800">`+percentStr+`</span>
									</div>
									<div class="w-full bg-gunmetal-200 rounded-full h-2.5">
										<div class="bg-brass-500 h-2.5 rounded-full" style="width: `+percentWidth+`"></div>
									</div>
								</div>
				`)
				if err != nil {
					return err
				}
			}
		}
		
		_, err = io.WriteString(w, `
							</div>
						</div>
					</div>
					
					<div class="mt-6 text-right">
						<a href="/admin/dashboard" class="px-4 py-2 bg-brass-500 hover:bg-brass-600 text-white rounded-md inline-block text-sm font-medium">Back to Dashboard</a>
					</div>
				</div>
		`)
		if err != nil {
			return err
		}
		
		// Now add the modals at the end of the page
		_, err = io.WriteString(w, `
					<!-- Error Detail Modals -->
		`)
		if err != nil {
			return err
		}
		
		// Add modals for each error
		for i, errEntry := range data.RecentErrors {
			errorID := fmt.Sprintf("error-%d", i)
			timestamp := errEntry.LastOccurred.Format("Jan 2, 2006 15:04:05")
			
			_, err = io.WriteString(w, `
					<div id="`+errorID+`" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
						<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
							<div class="mt-3">
								<div class="flex justify-between items-center border-b pb-3">
									<h3 class="text-lg font-medium text-gunmetal-900">Error Details</h3>
									<button onclick="document.getElementById('`+errorID+`').classList.add('hidden')" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex items-center justify-center">
										<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
											<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
										</svg>
									</button>
								</div>
								<div class="mt-4 space-y-3">
									<div>
										<p class="text-sm font-medium text-gunmetal-500">Error Type</p>
										<p class="text-sm text-gunmetal-900">`+errEntry.ErrorType+`</p>
									</div>
									<div>
										<p class="text-sm font-medium text-gunmetal-500">Service</p>
										<p class="text-sm text-gunmetal-900">`+errEntry.Service+`</p>
									</div>
									<div>
										<p class="text-sm font-medium text-gunmetal-500">Path</p>
										<p class="text-sm text-gunmetal-900">`+errEntry.Path+`</p>
									</div>
									<div>
										<p class="text-sm font-medium text-gunmetal-500">IP Address</p>
										<p class="text-sm text-gunmetal-900">`+errEntry.IPAddress+`</p>
									</div>
									<div>
										<p class="text-sm font-medium text-gunmetal-500">Time</p>
										<p class="text-sm text-gunmetal-900">`+timestamp+`</p>
									</div>
									<div>
										<p class="text-sm font-medium text-gunmetal-500">Occurrences</p>
										<p class="text-sm text-gunmetal-900">`+fmt.Sprintf("%d", errEntry.Count)+`</p>
									</div>
								</div>
								<div class="mt-5">
									<button onclick="document.getElementById('`+errorID+`').classList.add('hidden')" class="px-4 py-2 bg-brass-500 text-white w-full rounded-md hover:bg-brass-600 focus:outline-none focus:ring-2 focus:ring-brass-300">
										Close
									</button>
								</div>
							</div>
						</div>
					</div>
			`)
			if err != nil {
				return err
			}
		}
		
		return err
	}))
} 