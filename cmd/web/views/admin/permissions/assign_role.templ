package permissions

import (
	"context"
	"io"
	"strconv"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

templ AssignRole(viewData data.ViewData) {
	@partials.Base(viewData.AuthData, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		formData := viewData.Data.(*data.AssignRoleViewData)
		
		_, err := io.WriteString(w, `
			<div class="container mx-auto px-4 py-8">
				<div class="mb-8">
					<h1 class="text-2xl font-bold text-gunmetal-800">Assign Role to User</h1>
					<p class="text-gray-600">Assign roles to users to grant them permissions.</p>
				</div>
		`)
		if err != nil {
			return err
		}

		if viewData.ErrorMsg != "" {
			_, err = io.WriteString(w, `
				<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
					<span class="block sm:inline">`+viewData.ErrorMsg+`</span>
				</div>
			`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
			<div class="bg-white rounded-lg shadow">
				<div class="p-6">
					<form method="POST" action="/admin/permissions/assign-role">
						<input type="hidden" name="csrf_token" value="`+viewData.AuthData.CSRFToken+`">
						
						<div class="mb-6">
							<label for="user_search" class="block text-gray-700 text-sm font-medium mb-2">Search Users</label>
							<input type="text" id="user_search" placeholder="Type to search users..." 
								class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brass-500 focus:border-brass-500 mb-2">
							
							<label for="user_id" class="block text-gray-700 text-sm font-medium mb-2">Select User</label>
							<select id="user_id" name="user_id" required class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brass-500 focus:border-brass-500">
								<option value="">-- Select a User --</option>
		`)
		if err != nil {
			return err
		}

		for _, user := range formData.Users {
			userID := strconv.FormatUint(uint64(user.ID), 10)
			_, err = io.WriteString(w, `
								<option value="`+userID+`" data-email="`+user.Email+`">`+user.Email+`</option>
			`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</select>
						</div>
						
						<div class="mb-6">
							<label for="role_search" class="block text-gray-700 text-sm font-medium mb-2">Search Roles</label>
							<input type="text" id="role_search" placeholder="Type to search roles..." 
								class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brass-500 focus:border-brass-500 mb-2">
							
							<label for="role" class="block text-gray-700 text-sm font-medium mb-2">Select Role</label>
							<select id="role" name="role" required class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brass-500 focus:border-brass-500">
								<option value="">-- Select a Role --</option>
		`)
		if err != nil {
			return err
		}

		for _, role := range formData.Roles {
			_, err = io.WriteString(w, `
								<option value="`+role+`">`+role+`</option>
			`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
							</select>
						</div>

						<div class="flex items-center justify-between">
							<a href="/admin/permissions" class="text-brass-600 hover:text-brass-700">Cancel</a>
							<button type="submit" class="bg-brass-500 hover:bg-brass-600 text-white font-medium py-2 px-4 rounded">
								Assign Role
							</button>
						</div>
					</form>
				</div>
			</div>
			
			<script>
			document.addEventListener('DOMContentLoaded', function() {
				// User search functionality
				const userSearchInput = document.getElementById('user_search');
				const userSelect = document.getElementById('user_id');
				const userOptions = Array.from(userSelect.options).slice(1); // Skip the placeholder
				
				userSearchInput.addEventListener('input', function() {
					const searchTerm = this.value.toLowerCase();
					
					// Always show the placeholder option
					userSelect.innerHTML = '<option value="">-- Select a User --</option>';
					
					// Filter options based on search term
					const filteredOptions = userOptions.filter(option => {
						return option.text.toLowerCase().includes(searchTerm);
					});
					
					// Add filtered options back to select
					filteredOptions.forEach(option => {
						userSelect.appendChild(option.cloneNode(true));
					});
				});
				
				// Role search functionality
				const roleSearchInput = document.getElementById('role_search');
				const roleSelect = document.getElementById('role');
				const roleOptions = Array.from(roleSelect.options).slice(1); // Skip the placeholder
				
				roleSearchInput.addEventListener('input', function() {
					const searchTerm = this.value.toLowerCase();
					
					// Always show the placeholder option
					roleSelect.innerHTML = '<option value="">-- Select a Role --</option>';
					
					// Filter options based on search term
					const filteredOptions = roleOptions.filter(option => {
						return option.text.toLowerCase().includes(searchTerm);
					});
					
					// Add filtered options back to select
					filteredOptions.forEach(option => {
						roleSelect.appendChild(option.cloneNode(true));
					});
				});
			});
			</script>
		`)
		return err
	}))
} 