package owner

import (
	"context"
	"fmt"
	"io"
	"strconv"
	
	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

// Owner renders the owner landing page
templ Owner(data *data.OwnerData) {
	@partials.Base(data.Auth, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		return templ.Raw(`
		<!-- Background container with translucent image -->
		<div class="relative">
			<!-- Background image -->
			<div class="absolute inset-0 bg-cover bg-center bg-no-repeat opacity-15 z-0" style="background-image: url('/assets/workbench.jpg')"></div>
			
			<!-- Content container -->
			<div class="relative z-10 container mx-auto px-4 py-8">
				<div class="bg-white bg-opacity-70 shadow-md rounded-lg p-6 mb-8">
					<h1 class="text-2xl font-bold text-gunmetal-800 mb-4">Welcome to Your Virtual Armory</h1>
					<p class="text-gunmetal-700 mb-4">Manage your firearms collection, track maintenance, and more.</p>
					
					<!-- Quick Stats -->
					<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
						<div class="bg-gunmetal-100 bg-opacity-80 p-4 rounded-lg shadow">
							<h3 class="font-semibold text-lg text-gunmetal-800 mb-2">Your Arsenal</h3>
							<p class="text-gunmetal-800"><strong>Total Firearms:</strong> ` + strconv.Itoa(len(data.Guns)) + `</p>
							<p class="text-gunmetal-800"><strong>Total Paid:</strong> $` + strconv.FormatFloat(data.TotalPaid, 'f', 2, 64) + `</p>
							<p class="text-sm text-gunmetal-600 mt-2">More features coming soon!</p>
						</div>
						<div class="bg-gunmetal-100 bg-opacity-80 p-4 rounded-lg shadow">
							<h3 class="font-semibold text-lg text-gunmetal-800 mb-2">Recently Added</h3>
							` + func() string {
								if len(data.Guns) > 0 {
									result := ``
									// Show up to 3 most recent guns
									maxToShow := 3
									if len(data.Guns) < maxToShow {
										maxToShow = len(data.Guns)
									}
									
									for i := 0; i < maxToShow; i++ {
										gun := data.Guns[i]
										result += `<p class="text-gunmetal-800 font-medium mb-1">
											<a href="/owner/guns/` + strconv.FormatUint(uint64(gun.ID), 10) + `" class="text-blue-600 hover:underline">
												` + gun.Name + `
											</a>`
										
										if gun.Acquired != nil {
											result += ` <span class="text-sm text-gunmetal-600">` + gun.Acquired.Format("Jan 2, 2006") + `</span>`
										}
										
										result += `</p>`
									}
									return result
								} else {
									return `<p class="text-gunmetal-600">No firearms added yet</p>`
								}
							}() + `
						</div>
						<div class="bg-gunmetal-100 bg-opacity-80 p-4 rounded-lg shadow">
							<h3 class="font-semibold text-lg text-gunmetal-800 mb-2">Account Status</h3>
							<p class="text-gunmetal-800 mb-1"><strong>Current Plan:</strong> ` + func() string {
								// Format the subscription tier with proper capitalization
								tier := ""
								switch data.SubscriptionTier {
								case "free":
									tier = "Free"
								case "monthly":
									tier = "Liking It"
								case "yearly":
									tier = "Loving It"
								case "lifetime":
									tier = "Supporter"
								case "premium_lifetime":
									tier = "Big Baller"
								case "promotion":
									// Special handling for promotion tier with link to subscribe
									return `PROMOTION <a href="/pricing" class="text-blue-600 hover:text-blue-800 font-bold">(SUB NOW!)</a>`
								case "admin_grant":
									tier = "Admin Grant"
								default:
									tier = data.SubscriptionTier
								}
								
								// Add (canceled) label if subscription is canceled
								if data.User != nil && data.User.SubscriptionStatus == "canceled" {
									tier += " (canceled)"
								}
								
								return tier
							}() + `</p>
							` + func() string {
								if data.SubscriptionEndsAt != "" {
									return `<p class="text-gunmetal-800 mb-3"><strong>Expires on:</strong> ` + data.SubscriptionEndsAt + `</p>`
								}
								return ``
							}() + `
							<div class="flex space-x-2 mt-2">
								<a href="/owner/profile" class="text-blue-600 hover:text-blue-800 underline">Profile</a>
								<a href="/pricing" class="text-blue-600 hover:text-blue-800 underline">Change Plan</a>
							</div>
						</div>
					</div>
				</div>
				
				<!-- Firearms List -->
				<div class="bg-white bg-opacity-70 shadow-md rounded-lg p-6">
					<div class="flex justify-between items-center mb-4">
						<h2 class="text-xl font-semibold text-gunmetal-800">Your Firearms</h2>
						<div class="flex space-x-2">
							<a href="/owner/guns/arsenal" class="bg-brass-800 hover:bg-brass-600 text-white font-bold py-2 px-4 rounded">
								View Arsenal
							</a>
							<a href="/owner/guns/new" class="bg-gunmetal-700 hover:bg-gunmetal-700 text-white font-bold py-2 px-4 rounded">
								Add New Firearm
							</a>
						</div>
					</div>
					
					<!-- Search and Filter Bar -->
					<div class="mb-4">
						<form action="/owner" method="GET" class="flex flex-col md:flex-row gap-2">
							<div class="flex-grow">
								<input 
									type="text" 
									name="search" 
									value="` + data.SearchTerm + `"
									placeholder="Search firearms..." 
									class="w-full px-4 py-2 text-gunmetal-800 border border-gunmetal-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brass-400"
								>
							</div>
							<div class="md:w-48">
								<select name="sortBy" class="w-full px-4 py-2 text-gunmetal-800 border border-gunmetal-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brass-400">
									<option value="name" ` + func() string {
										if data.SortBy == "name" {
											return "selected"
										}
										return ""
									}() + `>Sort by Name</option>
									<option value="created_at" ` + func() string {
										if data.SortBy == "created_at" {
											return "selected"
										}
										return ""
									}() + `>Sort by Date Added</option>
									<option value="acquired" ` + func() string {
										if data.SortBy == "acquired" {
											return "selected"
										}
										return ""
									}() + `>Sort by Date Acquired</option>
									<option value="manufacturer" ` + func() string {
										if data.SortBy == "manufacturer" {
											return "selected"
										}
										return ""
									}() + `>Sort by Manufacturer</option>
									<option value="caliber" ` + func() string {
										if data.SortBy == "caliber" {
											return "selected"
										}
										return ""
									}() + `>Sort by Caliber</option>
									<option value="weapon_type" ` + func() string {
										if data.SortBy == "weapon_type" {
											return "selected"
										}
										return ""
									}() + `>Sort by Type</option>
								</select>
							</div>
							<div class="md:w-40">
								<select name="sortOrder" class="w-full px-4 py-2 text-gunmetal-800 border border-gunmetal-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brass-400">
									<option value="asc" ` + func() string {
										if data.SortOrder == "asc" {
											return "selected"
										}
										return ""
									}() + `>Ascending</option>
									<option value="desc" ` + func() string {
										if data.SortOrder == "desc" {
											return "selected"
										}
										return ""
									}() + `>Descending</option>
								</select>
							</div>
							<div class="md:w-36">
								<select name="perPage" class="w-full px-4 py-2 text-gunmetal-800 border border-gunmetal-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brass-400">
									<option value="10" ` + func() string {
										if data.PerPage == 10 {
											return "selected"
										}
										return ""
									}() + `>10 per page</option>
									<option value="25" ` + func() string {
										if data.PerPage == 25 {
											return "selected"
										}
										return ""
									}() + `>25 per page</option>
									<option value="50" ` + func() string {
										if data.PerPage == 50 {
											return "selected"
										}
										return ""
									}() + `>50 per page</option>
								</select>
							</div>
							<button type="submit" class="px-4 py-2 bg-brass-400 hover:bg-brass-300 text-white font-medium rounded">
								Apply
							</button>
							` + func() string {
								if data.HasFiltersApplied {
									return `<a href="/owner" class="px-4 py-2 bg-gunmetal-400 hover:bg-gunmetal-300 text-white font-medium rounded">
										Reset
									</a>`
								}
								return ""
							}() + `
						</form>
					</div>
					
					` + func() string {
						if len(data.Guns) > 0 {
							result := `<div class="overflow-x-auto">
								<table class="min-w-full bg-white">
									<thead class="bg-gunmetal-200">
										<tr>
											<th class="py-2 px-4 text-left text-gunmetal-800">Name</th>
											<th class="py-2 px-4 text-left text-gunmetal-800">Type</th>
											<th class="py-2 px-4 text-left text-gunmetal-800">Manufacturer</th>
											<th class="py-2 px-4 text-left text-gunmetal-800">Caliber</th>
											<th class="py-2 px-4 text-left text-gunmetal-800">Acquired</th>
											<th class="py-2 px-4 text-left text-gunmetal-800">Paid</th>
											<th class="py-2 px-4 text-left text-gunmetal-800">Actions</th>
										</tr>
									</thead>
									<tbody>`
							
							for _, gun := range data.Guns {
								result += `<tr class="border-t hover:bg-gunmetal-50">
									<td class="py-2 px-4">
										<a href="/owner/guns/` + strconv.FormatUint(uint64(gun.ID), 10) + `" class="text-brass-800 hover:text-brass-600 underline font-medium">
											` + gun.Name + `
										</a>
									</td>
									<td class="py-2 px-4 text-gunmetal-800">` + gun.WeaponType.Type + `</td>
									<td class="py-2 px-4 text-gunmetal-800">` + gun.Manufacturer.Name + `</td>
									<td class="py-2 px-4 text-gunmetal-800">` + gun.Caliber.Caliber + `</td>
									<td class="py-2 px-4 text-gunmetal-800">`
								
								if gun.Acquired != nil {
									result += gun.Acquired.Format("Jan 2, 2006")
								} else {
									result += `<span class="text-gunmetal-500">Unknown</span>`
								}
								
								result += `</td>
									<td class="py-2 px-4 text-gunmetal-800">`
								
								if gun.Paid != nil {
									result += fmt.Sprintf("$%.2f", *gun.Paid)
								} else {
									result += `<span class="text-gunmetal-500">Unknown</span>`
								}
								
								result += `</td>
									<td class="py-2 px-4">
										<div class="flex justify-center space-x-2">
										<a href="/owner/guns/` + strconv.FormatUint(uint64(gun.ID), 10) + `" class="text-brass-700 hover:text-brass-500">
											<span class="sr-only">View</span>
												<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
												</svg>
											</a>
											<a href="/owner/guns/` + strconv.FormatUint(uint64(gun.ID), 10) + `/edit" class="text-brass-700 hover:text-brass-500">
												<span class="sr-only">Edit</span>
												<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
												</svg>
											</a>
											<form method="POST" action="/owner/guns/` + strconv.FormatUint(uint64(gun.ID), 10) + `/delete" onsubmit="return confirm('Are you sure you want to delete this firearm?')" class="inline">
												<button type="submit" class="text-red-600 hover:text-red-800">
													<span class="sr-only">Delete</span>
													<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
													</svg>
												</button>
											</form>
										</div>
									</td>
								</tr>`
							}
							
							result += `</tbody>
								</table>
							</div>`
							
							// Pagination
							if data.TotalPages > 1 {
								result += `<div class="mt-4 flex justify-between items-center">
									<div class="flex space-x-1">
										`
										
								// Previous button
								if data.HasPreviousPage {
									result += `<a href="/owner?page=` + strconv.Itoa(data.CurrentPage-1) + `&perPage=` + strconv.Itoa(data.PerPage) + `&sortBy=` + data.SortBy + `&sortOrder=` + data.SortOrder + `&search=` + data.SearchTerm + `" 
										class="px-3 py-1 bg-gunmetal-200 text-gunmetal-700 rounded hover:bg-gunmetal-300">Previous</a>`
								} else {
									result += `<span class="px-3 py-1 bg-gunmetal-100 text-gunmetal-400 rounded cursor-not-allowed">Previous</span>`
								}
								
								// Page numbers
								for i := 1; i <= data.TotalPages; i++ {
									if i == data.CurrentPage {
										result += `<span class="px-3 py-1 bg-brass-400 text-white rounded">` + strconv.Itoa(i) + `</span>`
									} else {
										result += `<a href="/owner?page=` + strconv.Itoa(i) + `&perPage=` + strconv.Itoa(data.PerPage) + `&sortBy=` + data.SortBy + `&sortOrder=` + data.SortOrder + `&search=` + data.SearchTerm + `" 
											class="px-3 py-1 bg-gunmetal-200 text-gunmetal-700 rounded hover:bg-gunmetal-300">` + strconv.Itoa(i) + `</a>`
									}
								}
								
								// Next button
								if data.HasNextPage {
									result += `<a href="/owner?page=` + strconv.Itoa(data.CurrentPage+1) + `&perPage=` + strconv.Itoa(data.PerPage) + `&sortBy=` + data.SortBy + `&sortOrder=` + data.SortOrder + `&search=` + data.SearchTerm + `" 
										class="px-3 py-1 bg-gunmetal-200 text-gunmetal-700 rounded hover:bg-gunmetal-300">Next</a>`
								} else {
									result += `<span class="px-3 py-1 bg-gunmetal-100 text-gunmetal-400 rounded cursor-not-allowed">Next</span>`
								}
								
								result += `
									</div>
									<div class="text-sm text-gunmetal-600">
										Showing ` + strconv.Itoa(data.ShowingFrom) + ` to ` + 
										strconv.Itoa(data.ShowingTo) + ` of ` + 
										strconv.Itoa(data.TotalItems) + ` firearms
									</div>
								</div>`
							}
							
							return result
							
						} else {
							return `<div class="text-center py-8">
								<p class="text-gunmetal-700 mb-4">You haven't added any firearms yet.</p>
								<a href="/owner/guns/new" class="bg-brass-400 hover:bg-brass-300 text-white font-bold py-2 px-4 rounded">
									Add Your First Firearm
								</a>
							</div>`
						}
					}() + `
				</div>
				
				<!-- Feature Cards -->
				<div class="mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
					<div class="bg-gunmetal-300 bg-opacity-80 p-6 rounded-lg shadow-md">
						<h3 class="font-bold text-lg text-gunmetal-800 mb-2">Ammo Inventory</h3>
						<p class="text-gunmetal-700 mb-4">Manage your ammunition stock and consumption</p>
						<a href="#" class="text-brass-800 hover:text-brass-600 underline">Under Construction</a>
					</div>
					
					<div class="bg-white bg-opacity-70 p-6 rounded-lg shadow-md">
						<h3 class="font-bold text-lg text-gunmetal-800 mb-2">Range Day Tracking</h3>
						<p class="text-gunmetal-700 mb-4">Log your range visits, rounds fired, and performance notes.</p>
						<a href="#" class="text-brass-800 hover:text-brass-600 underline">Coming Soon</a>
					</div>
					
					<div class="bg-white bg-opacity-70 p-6 rounded-lg shadow-md">
						<h3 class="font-bold text-lg text-gunmetal-800 mb-2">Maintenance Records</h3>
						<p class="text-gunmetal-700 mb-4">Track cleanings, repairs with notifications.</p>
						<a href="#" class="text-brass-800 hover:text-brass-600 underline">Coming Soon</a>
					</div>
				</div>
			</div>
		</div>
		`).Render(ctx, w)
	}))
}