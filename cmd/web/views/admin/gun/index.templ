package gun

import (
	"context"
	"fmt"
	"io"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
	"github.com/hail2skins/armory/internal/models"
)

// GunsIndexData is the data for the admin guns index page
type GunsIndexData struct {
	*data.AdminData
	Guns            []models.Gun
	UserMap         map[uint]struct {
		Email    string
		GunCount int64
	}
	ManufacturerMap map[uint]string
	CaliberMap      map[uint]string
	WeaponTypeMap   map[uint]string
	TotalGuns       int64
}

// GunsIndex renders the admin guns index page
templ GunsIndex(data *GunsIndexData) {
	@partials.Base(data.AuthData, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, `
		<div class="bg-white shadow-md rounded-lg p-6">
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-2xl font-bold text-gunmetal-800">Guns Management</h1>
				<div class="flex items-center">
					<div class="bg-brass-50 border border-brass-200 rounded-lg px-4 py-2 mr-4 flex items-center">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-brass-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
						</svg>
						<span class="font-semibold text-gunmetal-800">Guns Tracked: <span id="guns-count">`+fmt.Sprintf("%d", data.TotalGuns)+`</span></span>
					</div>
					<a href="/admin/dashboard" class="text-brass-600 hover:text-brass-700 flex items-center">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
							<path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
						</svg>
						Back to Dashboard
					</a>
				</div>
			</div>
		`)
		if err != nil {
			return err
		}

		if data.Success != "" {
			_, err = io.WriteString(w, `
			<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
				<span class="block sm:inline">`+data.Success+`</span>
			</div>
			`)
			if err != nil {
				return err
			}
		}

		if data.Error != "" {
			_, err = io.WriteString(w, `
			<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
				<span class="block sm:inline">`+data.Error+`</span>
			</div>
			`)
			if err != nil {
				return err
			}
		}

		// Add search functionality
		_, err = io.WriteString(w, `
			<div class="mb-4">
				<input type="text" id="searchInput" placeholder="Search guns by any field..." 
					class="w-full px-4 py-2 border rounded-lg text-gunmetal-800 focus:outline-none focus:ring-2 focus:ring-brass-500"
					onkeyup="searchTable()">
			</div>
		`)
		if err != nil {
			return err
		}

		if len(data.Guns) == 0 {
			_, err = io.WriteString(w, `
				<div class="text-center py-8">
					<p class="text-gray-500">There are no guns tracked yet.</p>
				</div>
			`)
		} else {
			_, err = io.WriteString(w, `
				<div class="overflow-x-auto bg-white rounded-lg shadow overflow-y-auto">
					<table class="min-w-full bg-white border border-gunmetal-200 rounded-lg overflow-hidden" id="gunsTable">
						<thead class="bg-gunmetal-200">
							<tr>
								<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(0)">
									Owner <span class="ml-1">↕</span>
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(1)">
									Name <span class="ml-1">↕</span>
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(2)">
									Serial Number <span class="ml-1">↕</span>
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(3)">
									Purpose <span class="ml-1">↕</span>
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(4)">
									Type <span class="ml-1">↕</span>
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(5)">
									Caliber <span class="ml-1">↕</span>
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(6)">
									Manufacturer <span class="ml-1">↕</span>
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer text-gunmetal-800" onclick="sortTable(7)">
									Acquired <span class="ml-1">↕</span>
								</th>
							</tr>
						</thead>
						<tbody class="divide-y divide-gunmetal-200 text-gunmetal-800">
			`)
			if err != nil {
				return err
			}

			for _, gun := range data.Guns {
				// Get owner name
				ownerName := "Unknown"
				if userInfo, ok := data.UserMap[gun.OwnerID]; ok {
					ownerName = userInfo.Email
				}

				// Get weapon type name
				weaponType := "Unknown"
				if typeName, ok := data.WeaponTypeMap[gun.WeaponTypeID]; ok {
					weaponType = typeName
				}

				// Get caliber name
				caliber := "Unknown"
				if caliberName, ok := data.CaliberMap[gun.CaliberID]; ok {
					caliber = caliberName
				}

				// Get manufacturer name
				manufacturer := "Unknown"
				if manufacturerName, ok := data.ManufacturerMap[gun.ManufacturerID]; ok {
					manufacturer = manufacturerName
				}

				// Format acquired date
				acquiredDate := "Not specified"
				if gun.Acquired != nil {
					acquiredDate = gun.Acquired.Format("Jan 2, 2006")
				}

				_, err = io.WriteString(w, `
							<tr class="hover:bg-gunmetal-50">
								<td class="px-6 py-4 whitespace-nowrap">
									`+ownerName+`
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									`+gun.Name+`
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									`+gun.SerialNumber+`
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									`+gun.Purpose+`
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									`+weaponType+`
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									`+caliber+`
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									`+manufacturer+`
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									`+acquiredDate+`
								</td>
							</tr>
				`)
				if err != nil {
					return err
				}
			}

			_, err = io.WriteString(w, `
						</tbody>
					</table>
				</div>
			`)
			if err != nil {
				return err
			}
		}

		// Add JavaScript for sorting and searching
		_, err = io.WriteString(w, `
			</div>
			
			<script>
			function searchTable() {
				// Declare variables
				var input, filter, table, tr, td, i, j, txtValue, found, totalVisible = 0;
				input = document.getElementById("searchInput");
				filter = input.value.toUpperCase();
				table = document.getElementById("gunsTable");
				tr = table.getElementsByTagName("tr");

				// Loop through all table rows except the header
				for (i = 1; i < tr.length; i++) {
					found = false;
					// Loop through all columns in each row
					for (j = 0; j < 8; j++) { // Check all columns
						td = tr[i].getElementsByTagName("td")[j];
						if (td) {
							txtValue = td.textContent || td.innerText;
							if (txtValue.toUpperCase().indexOf(filter) > -1) {
								found = true;
								break;
							}
						}
					}
					// Show/hide row based on search match
					if (found) {
						tr[i].style.display = "";
						totalVisible++;
					} else {
						tr[i].style.display = "none";
					}
				}
				
				// Update the guns count display with the current filtered count
				document.getElementById("guns-count").textContent = totalVisible;
			}

			function sortTable(colIndex) {
				var table, rows, switching, i, x, y, shouldSwitch, dir = "asc", switchcount = 0;
				table = document.getElementById("gunsTable");
				switching = true;
				
				// Set sort direction to ascending
				while (switching) {
					switching = false;
					rows = table.rows;
					
					// Loop through rows (except header)
					for (i = 1; i < (rows.length - 1); i++) {
						shouldSwitch = false;
						x = rows[i].getElementsByTagName("TD")[colIndex];
						y = rows[i + 1].getElementsByTagName("TD")[colIndex];
						
						// Check if the two rows should switch
						if (dir == "asc") {
							if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
								shouldSwitch = true;
								break;
							}
						} else if (dir == "desc") {
							if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
								shouldSwitch = true;
								break;
							}
						}
					}
					
					if (shouldSwitch) {
						// Make the switch and mark that a switch has been done
						rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
						switching = true;
						switchcount++;
					} else {
						// If no switching has been done AND the direction is "asc", set the direction to "desc" and run the loop again
						if (switchcount == 0 && dir == "asc") {
							dir = "desc";
							switching = true;
						}
					}
				}
				
				// No need to update the counter since we're just reordering, not filtering
			}
			</script>
		`)
		
		return err
	}))
} 