package casing

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

templ Edit(data *data.AdminData) {
	@partials.Base(data.AuthData, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, `
		<div class="container mx-auto px-4 py-8">
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-3xl font-bold text-gunmetal-800">Edit Casing</h1>
				<div class="flex space-x-2">
					<a href="/admin/casings" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
						Back to List
					</a>
					<a href="/admin/casings/`)
		if err != nil {
			return err
		}

		// Only try to write the ID if a casing is provided
		if data.Casing != nil {
			_, err = io.WriteString(w, fmt.Sprintf("%d", data.Casing.ID))
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
						View Casing
					</a>
				</div>
			</div>
		`)
		if err != nil {
			return err
		}

		if data.Error != "" {
			_, err = io.WriteString(w, `
			<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
				<span class="block sm:inline">`+data.Error+`</span>
			</div>
			`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
		<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
		`)
		if err != nil {
			return err
		}

		// Only render the form if we have a casing
		if data.Casing != nil {
			// Convert the popularity to a string
			popularityStr := strconv.Itoa(data.Casing.Popularity)

			_, err = io.WriteString(w, fmt.Sprintf(`
			<form action="/admin/casings/%d" method="post">
				<input type="hidden" name="csrf_token" value="%s">
				<div class="mb-4">
					<label class="block text-gray-700 text-sm font-bold mb-2" for="type">
						Type
					</label>
					<input class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-800 leading-tight focus:outline-none focus:shadow-outline" 
						id="type" type="text" name="type" value="%s" required>
				</div>
				<div class="mb-4">
					<label class="block text-gray-700 text-sm font-bold mb-2" for="popularity">
						Popularity
					</label>
					<input class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-800 leading-tight focus:outline-none focus:shadow-outline" 
						id="popularity" type="number" name="popularity" value="%s">
					<p class="text-gray-600 text-xs italic">Higher values appear first in dropdowns</p>
				</div>
				<div class="flex items-center justify-between">
					<button class="bg-gunmetal-800 hover:bg-gunmetal-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" 
						type="submit">
						Update Casing
					</button>
				</div>
			</form>
			`, data.Casing.ID, data.AuthData.CSRFToken, data.Casing.Type, popularityStr))
			if err != nil {
				return err
			}
		} else {
			// If no casing is provided, show an error message
			_, err = io.WriteString(w, `
			<div class="p-4 bg-gray-100 rounded">
				<p class="text-center text-gray-700">Casing not found or has been deleted.</p>
			</div>
			`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
		</div>
		</div>
		`)
		return err
	}))
} 