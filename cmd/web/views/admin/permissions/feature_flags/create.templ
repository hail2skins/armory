package feature_flags

import (
	"context"
	"html"
	"io"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

templ Create(viewData data.ViewData) {
	@partials.Base(viewData.AuthData, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		formData, ok := viewData.Data.(*data.FeatureFlagFormData)
		if !ok {
			formData = &data.FeatureFlagFormData{
				FeatureFlag:    nil,
				AvailableRoles: []string{},
				AssignedRoles:  []string{},
			}
		}
		
		_, err := io.WriteString(w, `
			<div class="container mx-auto px-4 py-8">
				<div class="mb-8">
					<h1 class="text-2xl font-bold text-gunmetal-800">Create Feature Flag</h1>
					<p class="text-gray-600">Add a new feature flag to control access to specific features.</p>
				</div>
		`)
		if err != nil {
			return err
		}

		if viewData.ErrorMsg != "" {
			_, err = io.WriteString(w, `
				<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
					<span class="block sm:inline">`+viewData.ErrorMsg+`</span>
				</div>
			`)
			if err != nil {
				return err
			}
		}

		// Form
		_, err = io.WriteString(w, `
			<div class="bg-white rounded-lg shadow mb-8">
				<div class="px-6 py-4 border-b border-gray-200">
					<h2 class="text-xl font-semibold">Feature Flag Details</h2>
				</div>
				<div class="p-6">
					<form method="POST" action="/admin/permissions/feature-flags/create">
						<input type="hidden" name="csrf_token" value="`+viewData.AuthData.CSRFToken+`">
						
						<div class="mb-4">
							<label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
							<input
								type="text"
								id="name"
								name="name"
								required
								class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brass-500 focus:border-brass-500"
								placeholder="feature_name"
							>
							<p class="mt-1 text-sm text-gray-500">Use snake_case for feature names (e.g., new_feature)</p>
						</div>
						
						<div class="mb-4">
							<label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
							<textarea
								id="description"
								name="description"
								rows="3"
								class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brass-500 focus:border-brass-500"
								placeholder="Describe what this feature does..."
							></textarea>
						</div>
						
						<div class="mb-4">
							<div class="flex items-center">
								<input
									type="checkbox"
									id="enabled"
									name="enabled"
									value="true"
									class="h-4 w-4 text-brass-600 focus:ring-brass-500 border-gray-300 rounded"
								>
								<label for="enabled" class="ml-2 block text-sm text-gray-700">Enable this feature</label>
							</div>
							<p class="mt-1 text-sm text-gray-500">If enabled, the feature will be available to assigned roles</p>
						</div>
						
						<div class="mb-4">
							<div class="flex items-center">
								<input
									type="checkbox"
									id="public_access"
									name="public_access"
									value="true"
									class="h-4 w-4 text-brass-600 focus:ring-brass-500 border-gray-300 rounded"
								>
								<label for="public_access" class="ml-2 block text-sm text-gray-700">Public Access</label>
							</div>
							<p class="mt-1 text-sm text-gray-500">If enabled, <strong>all users</strong> will have access to this feature regardless of role assignments</p>
							<p class="mt-1 text-sm text-gray-500 text-amber-600">Use this as an emergency switch to quickly make features available to everyone or restrict access</p>
						</div>
						
						<div class="mb-6">
							<label class="block text-sm font-medium text-gray-700 mb-1">Roles with Access</label>
							<div class="mt-1 border border-gray-300 rounded-md p-3 bg-gray-50">
		`)
		if err != nil {
			return err
		}
		
		if len(formData.AvailableRoles) == 0 {
			_, err = io.WriteString(w, `
								<p class="text-gray-500">No roles available</p>
			`)
		} else {
			for _, role := range formData.AvailableRoles {
				_, err = io.WriteString(w, `
								<div class="flex items-center mb-2">
									<input
										type="checkbox"
										id="role_`+html.EscapeString(role)+`"
										name="roles"
										value="`+html.EscapeString(role)+`"
										class="h-4 w-4 text-brass-600 focus:ring-brass-500 border-gray-300 rounded"
									>
									<label for="role_`+html.EscapeString(role)+`" class="ml-2 block text-sm text-gray-700">`+html.EscapeString(role)+`</label>
								</div>
				`)
				if err != nil {
					return err
				}
			}
			_, err = io.WriteString(w, `
								<p class="mt-2 text-sm text-gray-500">If no roles are selected, the feature will be available to everyone when enabled</p>
			`)
		}
		
		_, err = io.WriteString(w, `
							</div>
						</div>
						
						<div class="flex justify-end">
							<a href="/admin/permissions/feature-flags" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-4 rounded mr-2">
								Cancel
							</a>
							<button type="submit" class="bg-brass-500 hover:bg-brass-600 text-white font-medium py-2 px-4 rounded">
								Create Feature Flag
							</button>
						</div>
					</form>
				</div>
			</div>

			<div class="mt-4">
				<a href="/admin/permissions/feature-flags" class="text-brass-600 hover:text-brass-700">
					&larr; Back to Feature Flags
				</a>
			</div>
		</div>
		`)
		return err
	}))
} 