package gun

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

templ Edit(data *data.OwnerData) {
	@partials.Base(data.Auth, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, `
		<link href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" rel="stylesheet" />
		<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

		<!-- Custom styles for our selects -->
		<style>
			/* Style for Choices.js dropdowns */
			.choices {
				margin-bottom: 16px;
				width: 100%;
			}
			
			.choices__inner {
				border: 1px solid #E2E8F0 !important;
				border-radius: 0.375rem !important;
				box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1) !important;
				padding: 8px 16px !important;
				min-height: 42px !important;
				background-color: white;
			}
			
			.choices__list--dropdown {
				border: 1px solid #E2E8F0 !important;
				box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1) !important;
				border-radius: 0.375rem !important;
			}
			
			.choices__list--dropdown .choices__item--selectable {
				padding: 8px 16px !important;
			}
			
			.choices__list--dropdown .choices__item--selectable.is-highlighted {
				background-color: #4B5563 !important;
				color: white !important;
			}
			
			.choices__input {
				background-color: transparent !important;
			}
			
			.choices[data-type*="select-one"] .choices__inner {
				padding-bottom: 8px !important;
			}
			
			.choices[data-type*="select-one"]:after {
				right: 16px !important;
			}
		</style>

		<div class="container mx-auto px-4 py-8">
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-3xl font-bold text-gunmetal-800">Edit Firearm</h1>
				<a href="/owner" class="bg-gunmetal-500 hover:bg-gunmetal-600 text-white font-bold py-2 px-4 rounded">
					Back to Dashboard
				</a>
			</div>
		`)
		if err != nil {
			return err
		}

		if data.Auth.Error != "" {
			_, err = io.WriteString(w, `
			<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
				<span class="block sm:inline">`+data.Auth.Error+`</span>
			</div>
			`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
		<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
			<form action="/owner/guns/`+strconv.FormatUint(uint64(data.Gun.ID), 10)+`" method="post" id="edit-gun-form">
				<input type="hidden" name="csrf_token" value="` + data.Auth.CSRFToken + `">
				<div class="mb-4">
					<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="name">
						Name
					</label>
					<input class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-800 leading-tight focus:outline-none focus:shadow-outline" 
						id="name" type="text" name="name" value="`+data.Gun.Name+`" required>
					`)
		if err != nil {
			return err
		}

		if nameError, ok := data.FormErrors["name"]; ok {
			_, err = io.WriteString(w, `
					<p class="text-red-500 text-xs italic">`+nameError+`</p>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
				</div>
				<div class="mb-4">
					<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="serial_number">
						Serial Number (Optional)
					</label>
					<input class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-800 leading-tight focus:outline-none focus:shadow-outline" 
						id="serial_number" type="text" name="serial_number" value="`+data.Gun.SerialNumber+`">
					`)
		if err != nil {
			return err
		}

		if serialError, ok := data.FormErrors["serial_number"]; ok {
			_, err = io.WriteString(w, `
					<p class="text-red-500 text-xs italic">`+serialError+`</p>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
				</div>
				<div class="mb-4">
					<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="purpose">
						Purpose (Optional)
					</label>
					<input class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-800 leading-tight focus:outline-none focus:shadow-outline" 
						id="purpose" type="text" name="purpose" value="`+data.Gun.Purpose+`" maxlength="100">
					<p class="text-gunmetal-500 text-xs">Examples: Carry, Plinking, Home Defense, Target Shooting, Hunting, Competition</p>
					`)
		if err != nil {
			return err
		}

		if purposeError, ok := data.FormErrors["purpose"]; ok {
			_, err = io.WriteString(w, `
					<p class="text-red-500 text-xs italic">`+purposeError+`</p>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
				</div>
				<div class="mb-4">
					<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="finish">
						Finish (Optional)
					</label>
					<input class="shadow appearance-none border rounded w-full py-2 px-3 text-gunmetal-800 leading-tight focus:outline-none focus:shadow-outline" 
						id="finish" type="text" name="finish" value="`+data.Gun.Finish+`" maxlength="100">
					<p class="text-gunmetal-500 text-xs">Examples: Bluing, Cerakote, Stainless, Nickel Plating, etc.</p>
					`)
		if err != nil {
			return err
		}

		if finishError, ok := data.FormErrors["finish"]; ok {
			_, err = io.WriteString(w, `
					<p class="text-red-500 text-xs italic">`+finishError+`</p>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
				</div>
				<div class="mb-4">
					<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="acquired_date">
						Acquired Date
					</label>
					<input 
						type="date" 
						id="acquired_date" 
						name="acquired_date"
						placeholder="MM-DD-YYYY"
						value="`+ func() string {
							if data.Gun.Acquired != nil {
								return data.Gun.Acquired.Format("2006-01-02")
							}
							return ""
						}() +`"
						class="block w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-brass-500 focus:border-brass-500"
					/>
					<p class="text-gunmetal-500 text-xs">Format: MM-DD-YYYY</p>
				</div>
				<div class="mb-4">
					<label for="paid" class="block text-gunmetal-700 font-medium mb-1">Paid (USD)</label>
					<input 
						type="number" 
						step="0.01" 
						min="0" 
						id="paid" 
						name="paid" 
						placeholder="Enter amount paid (optional)"
						value="`+ func() string {
							if data.Gun.Paid != nil {
								return fmt.Sprintf("%.2f", *data.Gun.Paid)
							}
							return ""
						}() +`"
						class="w-full px-3 py-2 border border-gunmetal-300 rounded-md focus:outline-none focus:ring-1 focus:ring-brass-400"
					/>
					<p class="text-sm text-gunmetal-500 mt-1">Please enter in USD</p>
				</div>
				<div class="mb-4">
					<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="weapon_type_id">
						Weapon Type
					</label>
					<select class="filterable-select" 
						id="weapon_type_id" name="weapon_type_id" required>
						<option value="">Select a weapon type</option>
					`)
		if err != nil {
			return err
		}

		// Sort weapon types by popularity (highest first)
		for _, weaponType := range data.WeaponTypes {
			displayText := weaponType.Type
			if weaponType.Nickname != "" {
				displayText = weaponType.Type + " (" + weaponType.Nickname + ")"
			}
			selected := ""
			if weaponType.ID == data.Gun.WeaponTypeID {
				selected = " selected"
			}
			_, err = io.WriteString(w, `
						<option value="`+strconv.FormatUint(uint64(weaponType.ID), 10)+`"`+selected+`>`+displayText+`</option>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
					</select>
					`)
		if err != nil {
			return err
		}

		if weaponTypeError, ok := data.FormErrors["weapon_type_id"]; ok {
			_, err = io.WriteString(w, `
					<p class="text-red-500 text-xs italic">`+weaponTypeError+`</p>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
				</div>
				<div class="mb-4">
					<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="caliber_id">
						Caliber
					</label>
					<select class="filterable-select" 
						id="caliber_id" name="caliber_id" required>
						<option value="">Select a caliber</option>
					`)
		if err != nil {
			return err
		}

		// Sort calibers by popularity (highest first)
		for _, caliber := range data.Calibers {
			displayText := caliber.Caliber
			if caliber.Nickname != "" {
				displayText = caliber.Caliber + " (" + caliber.Nickname + ")"
			}
			selected := ""
			if caliber.ID == data.Gun.CaliberID {
				selected = " selected"
			}
			_, err = io.WriteString(w, `
						<option value="`+strconv.FormatUint(uint64(caliber.ID), 10)+`"`+selected+`>`+displayText+`</option>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
					</select>
					`)
		if err != nil {
			return err
		}

		if caliberError, ok := data.FormErrors["caliber_id"]; ok {
			_, err = io.WriteString(w, `
					<p class="text-red-500 text-xs italic">`+caliberError+`</p>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
				</div>
				<div class="mb-4">
					<label class="block text-gunmetal-700 text-sm font-bold mb-2" for="manufacturer_id">
						Manufacturer
					</label>
					<select class="filterable-select" 
						id="manufacturer_id" name="manufacturer_id" required>
						<option value="">Select a manufacturer</option>
					`)
		if err != nil {
			return err
		}

		// Sort manufacturers by popularity (highest first)
		for _, manufacturer := range data.Manufacturers {
			displayText := manufacturer.Name
			if manufacturer.Nickname != "" {
				displayText = manufacturer.Name + " (" + manufacturer.Nickname + ")"
			}
			selected := ""
			if manufacturer.ID == data.Gun.ManufacturerID {
				selected = " selected"
			}
			_, err = io.WriteString(w, `
						<option value="`+strconv.FormatUint(uint64(manufacturer.ID), 10)+`"`+selected+`>`+displayText+`</option>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
					</select>
					`)
		if err != nil {
			return err
		}

		if manufacturerError, ok := data.FormErrors["manufacturer_id"]; ok {
			_, err = io.WriteString(w, `
					<p class="text-red-500 text-xs italic">`+manufacturerError+`</p>
					`)
			if err != nil {
				return err
			}
		}

		_, err = io.WriteString(w, `
				</div>
				<div class="flex items-center justify-between">
					<button class="bg-gunmetal-800 hover:bg-gunmetal-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" 
						type="submit">
						Update Firearm
					</button>
				</div>
			</form>
			
			<script>
				document.addEventListener('DOMContentLoaded', function() {
					// Initialize Choices.js on all selects with filterable-select class
					var filterableSelects = document.querySelectorAll('.filterable-select');
					
					filterableSelects.forEach(function(select) {
						new Choices(select, {
							searchEnabled: true,
							searchPlaceholderValue: 'Type to search...',
							itemSelectText: '',
							shouldSort: false,
							searchResultLimit: 50,
							position: 'auto',
							placeholder: true,
							placeholderValue: 'Select an option',
							// Disable fuzzy search completely - only exact substring matching
							fuseOptions: {
								// 0 = exact match only
								threshold: 0,
								// Only search in these properties
								keys: ['label', 'value', 'customProperties.displayText']
							}
						});
					});
				
					// Add date validation for acquired date
					const dateField = document.getElementById('acquired_date');
					
					dateField.addEventListener('input', function() {
						const selectedDate = new Date(this.value);
						const today = new Date();
						today.setHours(0, 0, 0, 0); // Reset time part for date comparison
						
						if (selectedDate > today) {
							// Show client-side warning but allow submission
							if (!this.nextElementSibling || !this.nextElementSibling.classList.contains('date-warning')) {
								const warning = document.createElement('p');
								warning.textContent = 'Warning: Date is in the future';
								warning.className = 'text-yellow-500 text-xs italic date-warning';
								this.parentNode.insertBefore(warning, this.nextElementSibling);
							}
						} else {
							// Remove warning if date is valid
							const warning = this.nextElementSibling;
							if (warning && warning.classList.contains('date-warning')) {
								warning.remove();
							}
						}
					});
				});
			</script>
		</div>
		`)
		return err
	}))
} 