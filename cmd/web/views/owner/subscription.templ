package owner

import (
	"context"
	"io"
	"fmt"
	"time"
	
	"github.com/hail2skins/armory/cmd/web/views/data"
	"github.com/hail2skins/armory/cmd/web/views/partials"
)

// Helper functions
func formatDate(date time.Time) string {
	if date.IsZero() {
		return "N/A"
	}
	return date.Format("January 2, 2006")
}

func getSubscriptionName(tier string) string {
	switch tier {
	case "free":
		return "Free"
	case "monthly":
		return "Liking It"
	case "yearly":
		return "Loving It"
	case "lifetime":
		return "Supporter"
	case "premium_lifetime":
		return "Big Baller"
	case "promotion":
		return "Promotion"
	default:
		return tier
	}
}

// Format amount from cents to dollars
func formatAmount(amount int64) string {
	return fmt.Sprintf("$%.2f", float64(amount)/100.0)
}

// Status badge HTML
func getStatusBadge(status string) string {
	switch status {
	case "succeeded":
		return `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
				` + status + `
			</span>`
	case "pending":
		return `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
				` + status + `
			</span>`
	case "failed":
		return `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
				` + status + `
			</span>`
	default:
		return `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
				` + status + `
			</span>`
	}
}

// Subscription renders the owner subscription management page
templ Subscription(data *data.OwnerData) {
	@partials.Base(data.Auth, templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, `
		<div class="max-w-4xl mx-auto py-8 px-4">
			<div class="mb-6">
				<a href="/owner/profile" class="text-brass-400 hover:text-brass-300 inline-flex items-center">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
					</svg>
					Back to My Profile
				</a>
			</div>
			
			<h1 class="text-3xl font-bold mb-6 text-gunmetal-800">Subscription Management</h1>
			
			` + func() string {
				if data.Auth.Success != "" {
					return `<div class="mb-4 bg-green-100 border-l-4 border-green-500 p-4 text-center">
						<p class="text-green-700">` + data.Auth.Success + `</p>
					</div>`
				}
				return ""
			}() + `
			
			<div class="bg-white shadow-md rounded-lg overflow-hidden mb-8">
				<div class="bg-gunmetal-700 text-white px-6 py-4">
					<h2 class="text-xl font-semibold">Current Plan</h2>
				</div>
				<div class="p-6 bg-gunmetal-50">
					<div class="mb-4">
						<p class="text-gunmetal-600">Plan</p>
						<p class="font-medium text-gunmetal-800">` + getSubscriptionName(data.User.SubscriptionTier) + `</p>
					</div>
					
					` + func() string {
						if data.User.SubscriptionTier != "free" && data.User.SubscriptionTier != "premium_lifetime" && data.User.SubscriptionTier != "lifetime" {
							return `<div class="mb-6">
								<p class="text-gunmetal-600">Expires</p>
								<p class="font-medium text-gunmetal-800">` + data.SubscriptionEndsAt + `</p>
							</div>`
						}
						return ""
					}() + `
					
					` + func() string {
						if data.User.SubscriptionTier == "free" {
							return `<a href="/pricing" class="bg-brass-400 hover:bg-brass-300 text-gunmetal-800 py-2 px-4 rounded transition duration-300 inline-block">
								Upgrade Plan
							</a>`
						} else if data.User.SubscriptionTier != "premium_lifetime" {
							return `<div class="flex flex-wrap gap-4">
								<a href="/pricing" class="bg-brass-400 hover:bg-brass-300 text-gunmetal-800 py-2 px-4 rounded transition duration-300 inline-block">
									Change Plan
								</a>
								
								` + func() string {
									if data.User.SubscriptionStatus != "canceled" {
										return `<form method="POST" action="/subscription/cancel" onsubmit="return confirmCancel(event)" data-expires="` + data.SubscriptionEndsAt + `">
											<input type="hidden" name="csrf_token" value="` + data.Auth.CSRFToken + `">
											<button type="submit" class="bg-gunmetal-600 hover:bg-gunmetal-500 text-white py-2 px-4 rounded transition duration-300">
												Cancel Subscription
											</button>
										</form>
										<script>
											function confirmCancel(event) {
												const form = event.target;
												const expiresDate = form.getAttribute('data-expires');
												return confirm("Are you sure you want to cancel your subscription? Your subscription will remain active until " + expiresDate + ".");
											}
										</script>`
									} else {
										return `<p class="text-amber-600 font-medium mt-2">
											Your subscription will not renew after the expiration date.
										</p>`
									}
								}() + `
							</div>`
						} else {
							return `<p class="text-green-600 font-medium">
								You have a lifetime subscription. Enjoy!
							</p>`
						}
					}() + `
				</div>
			</div>
			
			<div class="bg-white shadow-md rounded-lg overflow-hidden">
				<div class="bg-gunmetal-700 text-white px-6 py-4">
					<h2 class="text-xl font-semibold">Payment History</h2>
				</div>
				<div class="p-6 bg-gunmetal-50">
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gunmetal-200">
							<thead class="bg-gunmetal-100">
								<tr>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gunmetal-700 uppercase tracking-wider">
										Date
									</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gunmetal-700 uppercase tracking-wider">
										Description
									</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gunmetal-700 uppercase tracking-wider">
										Amount
									</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gunmetal-700 uppercase tracking-wider">
										Status
									</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gunmetal-200">
								` + func() string {
									if len(data.Payments) == 0 {
										return `<tr>
											<td colspan="4" class="px-6 py-4 whitespace-nowrap text-sm text-gunmetal-600 text-center">
												No payment history available
											</td>
										</tr>`
									}
									
									result := ""
									for _, payment := range data.Payments {
										result += `<tr>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gunmetal-700">
												` + formatDate(payment.CreatedAt) + `
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gunmetal-700">
												` + payment.Description + `
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gunmetal-700">
												` + formatAmount(payment.Amount) + `
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gunmetal-700">
												` + getStatusBadge(payment.Status) + `
											</td>
										</tr>`
									}
									return result
								}() + `
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
		`)
		return err
	}))
} 